// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package lottery

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// LotteryManagerMetaData contains all meta data concerning the LotteryManager contract.
var LotteryManagerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rolloutContract\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"RolloutCallbakTXFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enumLotteryManager.ContractState\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"TransState\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allBets\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"betAmounts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getState\",\"outputs\":[{\"internalType\":\"enumLotteryManager.ContractState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prizeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_target\",\"type\":\"uint256[]\"}],\"name\":\"recordPlaceBet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_results\",\"type\":\"uint256[]\"}],\"name\":\"rolloutCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rolloutContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enumLotteryManager.ContractState\",\"name\":\"_state\",\"type\":\"uint8\"}],\"name\":\"transState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561000f575f5ffd5b5060405161313d38038061313d8339818101604052810190610031919061037c565b865f5f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508560015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508460025f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505f600d5f6101000a81548160ff0219169083600381111561011457610113610435565b5b021790555083600690816101289190610669565b508260078190555082600881905550816009819055508060045f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060036005819055506001600a81905550603260038190555050505050505050610738565b5f604051905090565b5f5ffd5b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6101dc826101b3565b9050919050565b6101ec816101d2565b81146101f6575f5ffd5b50565b5f81519050610207816101e3565b92915050565b5f5ffd5b5f5ffd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61025b82610215565b810181811067ffffffffffffffff8211171561027a57610279610225565b5b80604052505050565b5f61028c6101a2565b90506102988282610252565b919050565b5f67ffffffffffffffff8211156102b7576102b6610225565b5b6102c082610215565b9050602081019050919050565b8281835e5f83830152505050565b5f6102ed6102e88461029d565b610283565b90508281526020810184848401111561030957610308610211565b5b6103148482856102cd565b509392505050565b5f82601f8301126103305761032f61020d565b5b81516103408482602086016102db565b91505092915050565b5f819050919050565b61035b81610349565b8114610365575f5ffd5b50565b5f8151905061037681610352565b92915050565b5f5f5f5f5f5f5f60e0888a031215610397576103966101ab565b5b5f6103a48a828b016101f9565b97505060206103b58a828b016101f9565b96505060406103c68a828b016101f9565b955050606088015167ffffffffffffffff8111156103e7576103e66101af565b5b6103f38a828b0161031c565b94505060806104048a828b01610368565b93505060a06104158a828b01610368565b92505060c06104268a828b016101f9565b91505092959891949750929550565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806104b057607f821691505b6020821081036104c3576104c261046c565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026105257fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826104ea565b61052f86836104ea565b95508019841693508086168417925050509392505050565b5f819050919050565b5f61056a61056561056084610349565b610547565b610349565b9050919050565b5f819050919050565b61058383610550565b61059761058f82610571565b8484546104f6565b825550505050565b5f5f905090565b6105ae61059f565b6105b981848461057a565b505050565b5b818110156105dc576105d15f826105a6565b6001810190506105bf565b5050565b601f821115610621576105f2816104c9565b6105fb846104db565b8101602085101561060a578190505b61061e610616856104db565b8301826105be565b50505b505050565b5f82821c905092915050565b5f6106415f1984600802610626565b1980831691505092915050565b5f6106598383610632565b9150826002028217905092915050565b61067282610462565b67ffffffffffffffff81111561068b5761068a610225565b5b6106958254610499565b6106a08282856105e0565b5f60209050601f8311600181146106d1575f84156106bf578287015190505b6106c9858261064e565b865550610730565b601f1984166106df866104c9565b5f5b82811015610706578489015182556001820191506020850194506020810190506106e1565b86831015610723578489015161071f601f891682610632565b8355505b6001600288020188555050505b505050505050565b6129f8806107455f395ff3fe608060405234801561000f575f5ffd5b50600436106100fe575f3560e01c806383197ef011610095578063bc90c27311610064578063bc90c27314610279578063c1dd099714610297578063e0ced0e1146102b3578063f851a440146102e3576100fe565b806383197ef0146102155780638da5cb5b1461021f578063900cf0cf1461023d578063a035b1fe1461025b576100fe565b80633edd7ff1116100d15780633edd7ff11461018c57806351096f96146101bd57806355a373d6146101d9578063590d81d5146101f7576100fe565b806306fdde031461010257806318160ddd146101205780631865c57d1461013e5780632f11d43c1461015c575b5f5ffd5b61010a610301565b60405161011791906117eb565b60405180910390f35b61012861038d565b6040516101359190611823565b60405180910390f35b610146610393565b60405161015391906118af565b60405180910390f35b610176600480360381019061017191906119be565b6103a8565b6040516101839190611823565b60405180910390f35b6101a660048036038101906101a19190611b57565b610831565b6040516101b4929190611bc0565b60405180910390f35b6101d760048036038101906101d29190611c0a565b6108a2565b005b6101e161093c565b6040516101ee9190611c90565b60405180910390f35b6101ff610961565b60405161020c9190611ca9565b60405180910390f35b61021d610986565b005b610227610ace565b6040516102349190611ca9565b60405180910390f35b610245610af3565b6040516102529190611823565b60405180910390f35b610263610af9565b6040516102709190611823565b60405180910390f35b610281610aff565b60405161028e9190611823565b60405180910390f35b6102b160048036038101906102ac9190611cc2565b610b05565b005b6102cd60048036038101906102c89190611d0d565b611020565b6040516102da9190611d8a565b60405180910390f35b6102eb6110c6565b6040516102f89190611ca9565b60405180910390f35b6006805461030e90611dd7565b80601f016020809104026020016040519081016040528092919081815260200182805461033a90611dd7565b80156103855780601f1061035c57610100808354040283529160200191610385565b820191905f5260205f20905b81548152906001019060200180831161036857829003601f168201915b505050505081565b60075481565b5f600d5f9054906101000a900460ff16905090565b5f828260055482829050146103f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e990611e51565b60405180910390fd5b60045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610481576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047890611edf565b60405180910390fd5b600160038111156104955761049461183c565b5b600d5f9054906101000a900460ff1660038111156104b6576104b561183c565b5b146104f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ed90611f6d565b60405180910390fd5b5f6007541161053a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053190611fd5565b60405180910390fd5b5f600954876105499190612020565b90505f600190505f87876040516020016105649291906120d9565b60405160208183030381529060405290505f600b826040516105869190612135565b9081526020016040518091039020805480602002602001604051908101604052809291908181526020015f905b82821015610641578382905f5260205f2090600202016040518060400160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481525050815260200190600101906105b3565b5050505090505f5f90505b815181101561070f578b73ffffffffffffffffffffffffffffffffffffffff1682828151811061067f5761067e61214b565b5b60200260200101515f015173ffffffffffffffffffffffffffffffffffffffff1603610702578a600b846040516106b69190612135565b908152602001604051809103902082815481106106d6576106d561214b565b5b905f5260205f2090600202016001015f8282546106f39190612178565b925050819055505f935061070f565b808060010191505061064c565b50821561080857600b826040516107269190612135565b908152602001604051809103902060405180604001604052808d73ffffffffffffffffffffffffffffffffffffffff1681526020018c815250908060018154018082558091505060019003905f5260205f2090600202015f909190919091505f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101555050600c82908060018154018082558091505060019003905f5260205f20015f9091909190915090816108069190612342565b505b8960075f8282546108199190612411565b92505081905550839650505050505050949350505050565b600b828051602081018201805184825260208301602085012081835280955050505050508181548110610862575f80fd5b905f5260205f2090600202015f9150915050805f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154905082565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610930576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610927906124b4565b60405180910390fd5b610939816110ea565b50565b60045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0b906124b4565b60405180910390fd5b600380811115610a2757610a2661183c565b5b600d5f9054906101000a900460ff166003811115610a4857610a4761183c565b5b1480610a8557505f6003811115610a6257610a6161183c565b5b600d5f9054906101000a900460ff166003811115610a8357610a8261183c565b5b145b610ac4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610abb90612542565b60405180910390fd5b610acc611326565b565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600a5481565b60095481565b60035481565b60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b94576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8b906125d0565b60405180910390fd5b60026003811115610ba857610ba761183c565b5b600d5f9054906101000a900460ff166003811115610bc957610bc861183c565b5b14610c09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0090612638565b60405180910390fd5b6005548282905014610c50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c47906126a0565b60405180910390fd5b5f8282604051602001610c649291906120d9565b60405160208183030381529060405290505f600b82604051610c869190612135565b9081526020016040518091039020805480602002602001604051908101604052809291908181526020015f905b82821015610d41578382905f5260205f2090600202016040518060400160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152505081526020019060010190610cb3565b5050505090505f81511115611011575f5f90505f5f90505b8251811015610d9b57828181518110610d7557610d7461214b565b5b60200260200101516020015182610d8c9190612178565b91508080600101915050610d59565b505f60045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610df79190611ca9565b602060405180830381865afa158015610e12573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610e3691906126d2565b90505f82606460035484610e4a9190612020565b610e54919061272a565b610e5e919061272a565b9050818382610e6d9190612020565b10610ead576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea4906127ca565b60405180910390fd5b5f5f90505b845181101561100c575f858281518110610ecf57610ece61214b565b5b60200260200101516020015183610ee69190612020565b905060045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb878481518110610f3857610f3761214b565b5b60200260200101515f0151836040518363ffffffff1660e01b8152600401610f61929190611bc0565b6020604051808303815f875af1158015610f7d573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610fa1919061281d565b610ffe577f815c847eadf55cfbfcde61b55fef4e435c34cc6c53f70022cf7d20649374653330878481518110610fda57610fd961214b565b5b60200260200101515f015183604051610ff593929190612848565b60405180910390a15b508080600101915050610eb2565b505050505b61101a5f6110ea565b50505050565b600c818154811061102f575f80fd5b905f5260205f20015f91509050805461104790611dd7565b80601f016020809104026020016040519081016040528092919081815260200182805461107390611dd7565b80156110be5780601f10611095576101008083540402835291602001916110be565b820191905f5260205f20905b8154815290600101906020018083116110a157829003601f168201915b505050505081565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f600d5f9054906101000a900460ff1690505f600381111561110f5761110e61183c565b5b8160038111156111225761112161183c565b5b14801561115357506001600381111561113e5761113d61183c565b5b8260038111156111515761115061183c565b5b145b6112c2576001600381111561116b5761116a61183c565b5b81600381111561117e5761117d61183c565b5b1480156111af57506002600381111561119a5761119961183c565b5b8260038111156111ad576111ac61183c565b5b145b6112c157600260038111156111c7576111c661183c565b5b8160038111156111da576111d961183c565b5b14801561120a57505f60038111156111f5576111f461183c565b5b8260038111156112085761120761183c565b5b145b1561121c57611217611367565b6112c0565b5f600381111561122f5761122e61183c565b5b8160038111156112425761124161183c565b5b148015611272575060038081111561125d5761125c61183c565b5b8260038111156112705761126f61183c565b5b145b156112845761127f611326565b6112bf565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112b6906128c7565b60405180910390fd5b5b5b5b81600d5f6101000a81548160ff021916908360038111156112e6576112e561183c565b5b02179055507f98fc7cdc63654fe293b3e70579dbda40dcc07d071258063515378560aa97fe018260405161131a91906118af565b60405180910390a15050565b61132e6113fd565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b6002600381111561137b5761137a61183c565b5b600d5f9054906101000a900460ff16600381111561139c5761139b61183c565b5b146113dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113d390612638565b60405180910390fd5b6113e46113fd565b600a5f8154809291906113f6906128e5565b9190505550565b5f60045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016114589190611ca9565b602060405180830381865afa158015611473573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061149791906126d2565b11156115f45760045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016115569190611ca9565b602060405180830381865afa158015611571573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061159591906126d2565b6040518363ffffffff1660e01b81526004016115b2929190611bc0565b6020604051808303815f875af11580156115ce573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906115f2919061281d565b505b5f600c805490501115611673575f5f90505b600c8054905081101561166457600b600c82815481106116295761162861214b565b5b905f5260205f200160405161163e91906129ac565b90815260200160405180910390205f611657919061167e565b8080600101915050611606565b50600c5f611672919061169f565b5b600854600781905550565b5080545f8255600202905f5260205f209081019061169c91906116bd565b50565b5080545f8255905f5260205f20908101906116ba9190611700565b50565b5b808211156116fc575f5f82015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182015f9055506002016116be565b5090565b5b8082111561171f575f81816117169190611723565b50600101611701565b5090565b50805461172f90611dd7565b5f825580601f10611740575061175d565b601f0160209004905f5260205f209081019061175c9190611760565b5b50565b5b80821115611777575f815f905550600101611761565b5090565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f6117bd8261177b565b6117c78185611785565b93506117d7818560208601611795565b6117e0816117a3565b840191505092915050565b5f6020820190508181035f83015261180381846117b3565b905092915050565b5f819050919050565b61181d8161180b565b82525050565b5f6020820190506118365f830184611814565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b6004811061187a5761187961183c565b5b50565b5f81905061188a82611869565b919050565b5f6118998261187d565b9050919050565b6118a98161188f565b82525050565b5f6020820190506118c25f8301846118a0565b92915050565b5f604051905090565b5f5ffd5b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f611902826118d9565b9050919050565b611912816118f8565b811461191c575f5ffd5b50565b5f8135905061192d81611909565b92915050565b61193c8161180b565b8114611946575f5ffd5b50565b5f8135905061195781611933565b92915050565b5f5ffd5b5f5ffd5b5f5ffd5b5f5f83601f84011261197e5761197d61195d565b5b8235905067ffffffffffffffff81111561199b5761199a611961565b5b6020830191508360208202830111156119b7576119b6611965565b5b9250929050565b5f5f5f5f606085870312156119d6576119d56118d1565b5b5f6119e38782880161191f565b94505060206119f487828801611949565b935050604085013567ffffffffffffffff811115611a1557611a146118d5565b5b611a2187828801611969565b925092505092959194509250565b5f5ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b611a69826117a3565b810181811067ffffffffffffffff82111715611a8857611a87611a33565b5b80604052505050565b5f611a9a6118c8565b9050611aa68282611a60565b919050565b5f67ffffffffffffffff821115611ac557611ac4611a33565b5b611ace826117a3565b9050602081019050919050565b828183375f83830152505050565b5f611afb611af684611aab565b611a91565b905082815260208101848484011115611b1757611b16611a2f565b5b611b22848285611adb565b509392505050565b5f82601f830112611b3e57611b3d61195d565b5b8135611b4e848260208601611ae9565b91505092915050565b5f5f60408385031215611b6d57611b6c6118d1565b5b5f83013567ffffffffffffffff811115611b8a57611b896118d5565b5b611b9685828601611b2a565b9250506020611ba785828601611949565b9150509250929050565b611bba816118f8565b82525050565b5f604082019050611bd35f830185611bb1565b611be06020830184611814565b9392505050565b60048110611bf3575f5ffd5b50565b5f81359050611c0481611be7565b92915050565b5f60208284031215611c1f57611c1e6118d1565b5b5f611c2c84828501611bf6565b91505092915050565b5f819050919050565b5f611c58611c53611c4e846118d9565b611c35565b6118d9565b9050919050565b5f611c6982611c3e565b9050919050565b5f611c7a82611c5f565b9050919050565b611c8a81611c70565b82525050565b5f602082019050611ca35f830184611c81565b92915050565b5f602082019050611cbc5f830184611bb1565b92915050565b5f5f60208385031215611cd857611cd76118d1565b5b5f83013567ffffffffffffffff811115611cf557611cf46118d5565b5b611d0185828601611969565b92509250509250929050565b5f60208284031215611d2257611d216118d1565b5b5f611d2f84828501611949565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f611d5c82611d38565b611d668185611d42565b9350611d76818560208601611795565b611d7f816117a3565b840191505092915050565b5f6020820190508181035f830152611da28184611d52565b905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680611dee57607f821691505b602082108103611e0157611e00611daa565b5b50919050565b7f496e76616c696420746172676574206c656e67746800000000000000000000005f82015250565b5f611e3b601583611785565b9150611e4682611e07565b602082019050919050565b5f6020820190508181035f830152611e6881611e2f565b9050919050565b7f4f6e6c7920746f6b656e2063616e2063616c6c20746869732066756e6374696f5f8201527f6e00000000000000000000000000000000000000000000000000000000000000602082015250565b5f611ec9602183611785565b9150611ed482611e6f565b604082019050919050565b5f6020820190508181035f830152611ef681611ebd565b9050919050565b7f436f6e7472616374206973206e6f7420696e20446973747269627574652073745f8201527f6174650000000000000000000000000000000000000000000000000000000000602082015250565b5f611f57602383611785565b9150611f6282611efd565b604082019050919050565b5f6020820190508181035f830152611f8481611f4b565b9050919050565b7f416c6c20746f6b656e732068617665206265656e20736f6c64206f75742e00005f82015250565b5f611fbf601e83611785565b9150611fca82611f8b565b602082019050919050565b5f6020820190508181035f830152611fec81611fb3565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61202a8261180b565b91506120358361180b565b92508282026120438161180b565b9150828204841483151761205a57612059611ff3565b5b5092915050565b5f82825260208201905092915050565b5f5ffd5b82818337505050565b5f6120898385612061565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156120bc576120bb612071565b5b6020830292506120cd838584612075565b82840190509392505050565b5f6020820190508181035f8301526120f281848661207e565b90509392505050565b5f81905092915050565b5f61210f82611d38565b61211981856120fb565b9350612129818560208601611795565b80840191505092915050565b5f6121408284612105565b915081905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f6121828261180b565b915061218d8361180b565b92508282019050808211156121a5576121a4611ff3565b5b92915050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026122077fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826121cc565b61221186836121cc565b95508019841693508086168417925050509392505050565b5f61224361223e6122398461180b565b611c35565b61180b565b9050919050565b5f819050919050565b61225c83612229565b6122706122688261224a565b8484546121d8565b825550505050565b5f5f905090565b612287612278565b612292818484612253565b505050565b5b818110156122b5576122aa5f8261227f565b600181019050612298565b5050565b601f8211156122fa576122cb816121ab565b6122d4846121bd565b810160208510156122e3578190505b6122f76122ef856121bd565b830182612297565b50505b505050565b5f82821c905092915050565b5f61231a5f19846008026122ff565b1980831691505092915050565b5f612332838361230b565b9150826002028217905092915050565b61234b82611d38565b67ffffffffffffffff81111561236457612363611a33565b5b61236e8254611dd7565b6123798282856122b9565b5f60209050601f8311600181146123aa575f8415612398578287015190505b6123a28582612327565b865550612409565b601f1984166123b8866121ab565b5f5b828110156123df578489015182556001820191506020850194506020810190506123ba565b868310156123fc57848901516123f8601f89168261230b565b8355505b6001600288020188555050505b505050505050565b5f61241b8261180b565b91506124268361180b565b925082820390508181111561243e5761243d611ff3565b5b92915050565b7f4f6e6c792061646d696e2063616e2063616c6c20746869732066756e6374696f5f8201527f6e00000000000000000000000000000000000000000000000000000000000000602082015250565b5f61249e602183611785565b91506124a982612444565b604082019050919050565b5f6020820190508181035f8301526124cb81612492565b9050919050565b7f436f6e7472616374206973206e6f7420696e205465726d696e616c206f7220525f8201527f6561647920737461746500000000000000000000000000000000000000000000602082015250565b5f61252c602a83611785565b9150612537826124d2565b604082019050919050565b5f6020820190508181035f83015261255981612520565b9050919050565b7f4f6e6c7920726f6c6c6f757420636f6e74726163742063616e2063616c6c20745f8201527f6869732066756e6374696f6e0000000000000000000000000000000000000000602082015250565b5f6125ba602c83611785565b91506125c582612560565b604082019050919050565b5f6020820190508181035f8301526125e7816125ae565b9050919050565b7f436f6e7472616374206973206e6f7420696e20526f6c6c6f75742073746174655f82015250565b5f612622602083611785565b915061262d826125ee565b602082019050919050565b5f6020820190508181035f83015261264f81612616565b9050919050565b7f496e76616c696420726573756c7473206c656e677468000000000000000000005f82015250565b5f61268a601683611785565b915061269582612656565b602082019050919050565b5f6020820190508181035f8301526126b78161267e565b9050919050565b5f815190506126cc81611933565b92915050565b5f602082840312156126e7576126e66118d1565b5b5f6126f4848285016126be565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f6127348261180b565b915061273f8361180b565b92508261274f5761274e6126fd565b5b828204905092915050565b7f5468657265206973206e6f20656e6f75676820746f6b656e20696e205072697a5f8201527f6520706f6f6c2e00000000000000000000000000000000000000000000000000602082015250565b5f6127b4602783611785565b91506127bf8261275a565b604082019050919050565b5f6020820190508181035f8301526127e1816127a8565b9050919050565b5f8115159050919050565b6127fc816127e8565b8114612806575f5ffd5b50565b5f81519050612817816127f3565b92915050565b5f60208284031215612832576128316118d1565b5b5f61283f84828501612809565b91505092915050565b5f60608201905061285b5f830186611bb1565b6128686020830185611bb1565b6128756040830184611814565b949350505050565b7f496e76616c6964207374617465207472616e736974696f6e00000000000000005f82015250565b5f6128b1601883611785565b91506128bc8261287d565b602082019050919050565b5f6020820190508181035f8301526128de816128a5565b9050919050565b5f6128ef8261180b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361292157612920611ff3565b5b600182019050919050565b5f815461293881611dd7565b61294281866120fb565b9450600182165f811461295c5760018114612971576129a3565b60ff19831686528115158202860193506129a3565b61297a856121ab565b5f5b8381101561299b5781548189015260018201915060208101905061297c565b838801955050505b50505092915050565b5f6129b7828461292c565b91508190509291505056fea2646970667358221220ac9a9dc88fe9b2b460e8f95b82098a734503d35be4564bcf002f06c8f24612be64736f6c634300081c0033",
}

// LotteryManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use LotteryManagerMetaData.ABI instead.
var LotteryManagerABI = LotteryManagerMetaData.ABI

// LotteryManagerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use LotteryManagerMetaData.Bin instead.
var LotteryManagerBin = LotteryManagerMetaData.Bin

// DeployLotteryManager deploys a new Ethereum contract, binding an instance of LotteryManager to it.
func DeployLotteryManager(auth *bind.TransactOpts, backend bind.ContractBackend, _admin common.Address, _owner common.Address, _rolloutContract common.Address, _name string, supply *big.Int, _price *big.Int, _tokenContract common.Address) (common.Address, *types.Transaction, *LotteryManager, error) {
	parsed, err := LotteryManagerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(LotteryManagerBin), backend, _admin, _owner, _rolloutContract, _name, supply, _price, _tokenContract)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &LotteryManager{LotteryManagerCaller: LotteryManagerCaller{contract: contract}, LotteryManagerTransactor: LotteryManagerTransactor{contract: contract}, LotteryManagerFilterer: LotteryManagerFilterer{contract: contract}}, nil
}

// LotteryManager is an auto generated Go binding around an Ethereum contract.
type LotteryManager struct {
	LotteryManagerCaller     // Read-only binding to the contract
	LotteryManagerTransactor // Write-only binding to the contract
	LotteryManagerFilterer   // Log filterer for contract events
}

// LotteryManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type LotteryManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LotteryManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type LotteryManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LotteryManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type LotteryManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LotteryManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type LotteryManagerSession struct {
	Contract     *LotteryManager   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// LotteryManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type LotteryManagerCallerSession struct {
	Contract *LotteryManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// LotteryManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type LotteryManagerTransactorSession struct {
	Contract     *LotteryManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// LotteryManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type LotteryManagerRaw struct {
	Contract *LotteryManager // Generic contract binding to access the raw methods on
}

// LotteryManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type LotteryManagerCallerRaw struct {
	Contract *LotteryManagerCaller // Generic read-only contract binding to access the raw methods on
}

// LotteryManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type LotteryManagerTransactorRaw struct {
	Contract *LotteryManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewLotteryManager creates a new instance of LotteryManager, bound to a specific deployed contract.
func NewLotteryManager(address common.Address, backend bind.ContractBackend) (*LotteryManager, error) {
	contract, err := bindLotteryManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &LotteryManager{LotteryManagerCaller: LotteryManagerCaller{contract: contract}, LotteryManagerTransactor: LotteryManagerTransactor{contract: contract}, LotteryManagerFilterer: LotteryManagerFilterer{contract: contract}}, nil
}

// NewLotteryManagerCaller creates a new read-only instance of LotteryManager, bound to a specific deployed contract.
func NewLotteryManagerCaller(address common.Address, caller bind.ContractCaller) (*LotteryManagerCaller, error) {
	contract, err := bindLotteryManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &LotteryManagerCaller{contract: contract}, nil
}

// NewLotteryManagerTransactor creates a new write-only instance of LotteryManager, bound to a specific deployed contract.
func NewLotteryManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*LotteryManagerTransactor, error) {
	contract, err := bindLotteryManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &LotteryManagerTransactor{contract: contract}, nil
}

// NewLotteryManagerFilterer creates a new log filterer instance of LotteryManager, bound to a specific deployed contract.
func NewLotteryManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*LotteryManagerFilterer, error) {
	contract, err := bindLotteryManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &LotteryManagerFilterer{contract: contract}, nil
}

// bindLotteryManager binds a generic wrapper to an already deployed contract.
func bindLotteryManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := LotteryManagerMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LotteryManager *LotteryManagerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LotteryManager.Contract.LotteryManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LotteryManager *LotteryManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LotteryManager.Contract.LotteryManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LotteryManager *LotteryManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LotteryManager.Contract.LotteryManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LotteryManager *LotteryManagerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LotteryManager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LotteryManager *LotteryManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LotteryManager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LotteryManager *LotteryManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LotteryManager.Contract.contract.Transact(opts, method, params...)
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_LotteryManager *LotteryManagerCaller) Admin(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _LotteryManager.contract.Call(opts, &out, "admin")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_LotteryManager *LotteryManagerSession) Admin() (common.Address, error) {
	return _LotteryManager.Contract.Admin(&_LotteryManager.CallOpts)
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_LotteryManager *LotteryManagerCallerSession) Admin() (common.Address, error) {
	return _LotteryManager.Contract.Admin(&_LotteryManager.CallOpts)
}

// AllBets is a free data retrieval call binding the contract method 0xe0ced0e1.
//
// Solidity: function allBets(uint256 ) view returns(bytes)
func (_LotteryManager *LotteryManagerCaller) AllBets(opts *bind.CallOpts, arg0 *big.Int) ([]byte, error) {
	var out []interface{}
	err := _LotteryManager.contract.Call(opts, &out, "allBets", arg0)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// AllBets is a free data retrieval call binding the contract method 0xe0ced0e1.
//
// Solidity: function allBets(uint256 ) view returns(bytes)
func (_LotteryManager *LotteryManagerSession) AllBets(arg0 *big.Int) ([]byte, error) {
	return _LotteryManager.Contract.AllBets(&_LotteryManager.CallOpts, arg0)
}

// AllBets is a free data retrieval call binding the contract method 0xe0ced0e1.
//
// Solidity: function allBets(uint256 ) view returns(bytes)
func (_LotteryManager *LotteryManagerCallerSession) AllBets(arg0 *big.Int) ([]byte, error) {
	return _LotteryManager.Contract.AllBets(&_LotteryManager.CallOpts, arg0)
}

// BetAmounts is a free data retrieval call binding the contract method 0x3edd7ff1.
//
// Solidity: function betAmounts(bytes , uint256 ) view returns(address buyer, uint256 amount)
func (_LotteryManager *LotteryManagerCaller) BetAmounts(opts *bind.CallOpts, arg0 []byte, arg1 *big.Int) (struct {
	Buyer  common.Address
	Amount *big.Int
}, error) {
	var out []interface{}
	err := _LotteryManager.contract.Call(opts, &out, "betAmounts", arg0, arg1)

	outstruct := new(struct {
		Buyer  common.Address
		Amount *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Buyer = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Amount = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// BetAmounts is a free data retrieval call binding the contract method 0x3edd7ff1.
//
// Solidity: function betAmounts(bytes , uint256 ) view returns(address buyer, uint256 amount)
func (_LotteryManager *LotteryManagerSession) BetAmounts(arg0 []byte, arg1 *big.Int) (struct {
	Buyer  common.Address
	Amount *big.Int
}, error) {
	return _LotteryManager.Contract.BetAmounts(&_LotteryManager.CallOpts, arg0, arg1)
}

// BetAmounts is a free data retrieval call binding the contract method 0x3edd7ff1.
//
// Solidity: function betAmounts(bytes , uint256 ) view returns(address buyer, uint256 amount)
func (_LotteryManager *LotteryManagerCallerSession) BetAmounts(arg0 []byte, arg1 *big.Int) (struct {
	Buyer  common.Address
	Amount *big.Int
}, error) {
	return _LotteryManager.Contract.BetAmounts(&_LotteryManager.CallOpts, arg0, arg1)
}

// Epoch is a free data retrieval call binding the contract method 0x900cf0cf.
//
// Solidity: function epoch() view returns(uint256)
func (_LotteryManager *LotteryManagerCaller) Epoch(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _LotteryManager.contract.Call(opts, &out, "epoch")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Epoch is a free data retrieval call binding the contract method 0x900cf0cf.
//
// Solidity: function epoch() view returns(uint256)
func (_LotteryManager *LotteryManagerSession) Epoch() (*big.Int, error) {
	return _LotteryManager.Contract.Epoch(&_LotteryManager.CallOpts)
}

// Epoch is a free data retrieval call binding the contract method 0x900cf0cf.
//
// Solidity: function epoch() view returns(uint256)
func (_LotteryManager *LotteryManagerCallerSession) Epoch() (*big.Int, error) {
	return _LotteryManager.Contract.Epoch(&_LotteryManager.CallOpts)
}

// GetState is a free data retrieval call binding the contract method 0x1865c57d.
//
// Solidity: function getState() view returns(uint8)
func (_LotteryManager *LotteryManagerCaller) GetState(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _LotteryManager.contract.Call(opts, &out, "getState")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetState is a free data retrieval call binding the contract method 0x1865c57d.
//
// Solidity: function getState() view returns(uint8)
func (_LotteryManager *LotteryManagerSession) GetState() (uint8, error) {
	return _LotteryManager.Contract.GetState(&_LotteryManager.CallOpts)
}

// GetState is a free data retrieval call binding the contract method 0x1865c57d.
//
// Solidity: function getState() view returns(uint8)
func (_LotteryManager *LotteryManagerCallerSession) GetState() (uint8, error) {
	return _LotteryManager.Contract.GetState(&_LotteryManager.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_LotteryManager *LotteryManagerCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _LotteryManager.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_LotteryManager *LotteryManagerSession) Name() (string, error) {
	return _LotteryManager.Contract.Name(&_LotteryManager.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_LotteryManager *LotteryManagerCallerSession) Name() (string, error) {
	return _LotteryManager.Contract.Name(&_LotteryManager.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_LotteryManager *LotteryManagerCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _LotteryManager.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_LotteryManager *LotteryManagerSession) Owner() (common.Address, error) {
	return _LotteryManager.Contract.Owner(&_LotteryManager.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_LotteryManager *LotteryManagerCallerSession) Owner() (common.Address, error) {
	return _LotteryManager.Contract.Owner(&_LotteryManager.CallOpts)
}

// Price is a free data retrieval call binding the contract method 0xa035b1fe.
//
// Solidity: function price() view returns(uint256)
func (_LotteryManager *LotteryManagerCaller) Price(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _LotteryManager.contract.Call(opts, &out, "price")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Price is a free data retrieval call binding the contract method 0xa035b1fe.
//
// Solidity: function price() view returns(uint256)
func (_LotteryManager *LotteryManagerSession) Price() (*big.Int, error) {
	return _LotteryManager.Contract.Price(&_LotteryManager.CallOpts)
}

// Price is a free data retrieval call binding the contract method 0xa035b1fe.
//
// Solidity: function price() view returns(uint256)
func (_LotteryManager *LotteryManagerCallerSession) Price() (*big.Int, error) {
	return _LotteryManager.Contract.Price(&_LotteryManager.CallOpts)
}

// PrizeRate is a free data retrieval call binding the contract method 0xbc90c273.
//
// Solidity: function prizeRate() view returns(uint256)
func (_LotteryManager *LotteryManagerCaller) PrizeRate(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _LotteryManager.contract.Call(opts, &out, "prizeRate")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PrizeRate is a free data retrieval call binding the contract method 0xbc90c273.
//
// Solidity: function prizeRate() view returns(uint256)
func (_LotteryManager *LotteryManagerSession) PrizeRate() (*big.Int, error) {
	return _LotteryManager.Contract.PrizeRate(&_LotteryManager.CallOpts)
}

// PrizeRate is a free data retrieval call binding the contract method 0xbc90c273.
//
// Solidity: function prizeRate() view returns(uint256)
func (_LotteryManager *LotteryManagerCallerSession) PrizeRate() (*big.Int, error) {
	return _LotteryManager.Contract.PrizeRate(&_LotteryManager.CallOpts)
}

// RolloutContract is a free data retrieval call binding the contract method 0x590d81d5.
//
// Solidity: function rolloutContract() view returns(address)
func (_LotteryManager *LotteryManagerCaller) RolloutContract(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _LotteryManager.contract.Call(opts, &out, "rolloutContract")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RolloutContract is a free data retrieval call binding the contract method 0x590d81d5.
//
// Solidity: function rolloutContract() view returns(address)
func (_LotteryManager *LotteryManagerSession) RolloutContract() (common.Address, error) {
	return _LotteryManager.Contract.RolloutContract(&_LotteryManager.CallOpts)
}

// RolloutContract is a free data retrieval call binding the contract method 0x590d81d5.
//
// Solidity: function rolloutContract() view returns(address)
func (_LotteryManager *LotteryManagerCallerSession) RolloutContract() (common.Address, error) {
	return _LotteryManager.Contract.RolloutContract(&_LotteryManager.CallOpts)
}

// TokenContract is a free data retrieval call binding the contract method 0x55a373d6.
//
// Solidity: function tokenContract() view returns(address)
func (_LotteryManager *LotteryManagerCaller) TokenContract(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _LotteryManager.contract.Call(opts, &out, "tokenContract")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TokenContract is a free data retrieval call binding the contract method 0x55a373d6.
//
// Solidity: function tokenContract() view returns(address)
func (_LotteryManager *LotteryManagerSession) TokenContract() (common.Address, error) {
	return _LotteryManager.Contract.TokenContract(&_LotteryManager.CallOpts)
}

// TokenContract is a free data retrieval call binding the contract method 0x55a373d6.
//
// Solidity: function tokenContract() view returns(address)
func (_LotteryManager *LotteryManagerCallerSession) TokenContract() (common.Address, error) {
	return _LotteryManager.Contract.TokenContract(&_LotteryManager.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_LotteryManager *LotteryManagerCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _LotteryManager.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_LotteryManager *LotteryManagerSession) TotalSupply() (*big.Int, error) {
	return _LotteryManager.Contract.TotalSupply(&_LotteryManager.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_LotteryManager *LotteryManagerCallerSession) TotalSupply() (*big.Int, error) {
	return _LotteryManager.Contract.TotalSupply(&_LotteryManager.CallOpts)
}

// Destroy is a paid mutator transaction binding the contract method 0x83197ef0.
//
// Solidity: function destroy() returns()
func (_LotteryManager *LotteryManagerTransactor) Destroy(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LotteryManager.contract.Transact(opts, "destroy")
}

// Destroy is a paid mutator transaction binding the contract method 0x83197ef0.
//
// Solidity: function destroy() returns()
func (_LotteryManager *LotteryManagerSession) Destroy() (*types.Transaction, error) {
	return _LotteryManager.Contract.Destroy(&_LotteryManager.TransactOpts)
}

// Destroy is a paid mutator transaction binding the contract method 0x83197ef0.
//
// Solidity: function destroy() returns()
func (_LotteryManager *LotteryManagerTransactorSession) Destroy() (*types.Transaction, error) {
	return _LotteryManager.Contract.Destroy(&_LotteryManager.TransactOpts)
}

// RecordPlaceBet is a paid mutator transaction binding the contract method 0x2f11d43c.
//
// Solidity: function recordPlaceBet(address buyer, uint256 _amount, uint256[] _target) returns(uint256)
func (_LotteryManager *LotteryManagerTransactor) RecordPlaceBet(opts *bind.TransactOpts, buyer common.Address, _amount *big.Int, _target []*big.Int) (*types.Transaction, error) {
	return _LotteryManager.contract.Transact(opts, "recordPlaceBet", buyer, _amount, _target)
}

// RecordPlaceBet is a paid mutator transaction binding the contract method 0x2f11d43c.
//
// Solidity: function recordPlaceBet(address buyer, uint256 _amount, uint256[] _target) returns(uint256)
func (_LotteryManager *LotteryManagerSession) RecordPlaceBet(buyer common.Address, _amount *big.Int, _target []*big.Int) (*types.Transaction, error) {
	return _LotteryManager.Contract.RecordPlaceBet(&_LotteryManager.TransactOpts, buyer, _amount, _target)
}

// RecordPlaceBet is a paid mutator transaction binding the contract method 0x2f11d43c.
//
// Solidity: function recordPlaceBet(address buyer, uint256 _amount, uint256[] _target) returns(uint256)
func (_LotteryManager *LotteryManagerTransactorSession) RecordPlaceBet(buyer common.Address, _amount *big.Int, _target []*big.Int) (*types.Transaction, error) {
	return _LotteryManager.Contract.RecordPlaceBet(&_LotteryManager.TransactOpts, buyer, _amount, _target)
}

// RolloutCallback is a paid mutator transaction binding the contract method 0xc1dd0997.
//
// Solidity: function rolloutCallback(uint256[] _results) returns()
func (_LotteryManager *LotteryManagerTransactor) RolloutCallback(opts *bind.TransactOpts, _results []*big.Int) (*types.Transaction, error) {
	return _LotteryManager.contract.Transact(opts, "rolloutCallback", _results)
}

// RolloutCallback is a paid mutator transaction binding the contract method 0xc1dd0997.
//
// Solidity: function rolloutCallback(uint256[] _results) returns()
func (_LotteryManager *LotteryManagerSession) RolloutCallback(_results []*big.Int) (*types.Transaction, error) {
	return _LotteryManager.Contract.RolloutCallback(&_LotteryManager.TransactOpts, _results)
}

// RolloutCallback is a paid mutator transaction binding the contract method 0xc1dd0997.
//
// Solidity: function rolloutCallback(uint256[] _results) returns()
func (_LotteryManager *LotteryManagerTransactorSession) RolloutCallback(_results []*big.Int) (*types.Transaction, error) {
	return _LotteryManager.Contract.RolloutCallback(&_LotteryManager.TransactOpts, _results)
}

// TransState is a paid mutator transaction binding the contract method 0x51096f96.
//
// Solidity: function transState(uint8 _state) returns()
func (_LotteryManager *LotteryManagerTransactor) TransState(opts *bind.TransactOpts, _state uint8) (*types.Transaction, error) {
	return _LotteryManager.contract.Transact(opts, "transState", _state)
}

// TransState is a paid mutator transaction binding the contract method 0x51096f96.
//
// Solidity: function transState(uint8 _state) returns()
func (_LotteryManager *LotteryManagerSession) TransState(_state uint8) (*types.Transaction, error) {
	return _LotteryManager.Contract.TransState(&_LotteryManager.TransactOpts, _state)
}

// TransState is a paid mutator transaction binding the contract method 0x51096f96.
//
// Solidity: function transState(uint8 _state) returns()
func (_LotteryManager *LotteryManagerTransactorSession) TransState(_state uint8) (*types.Transaction, error) {
	return _LotteryManager.Contract.TransState(&_LotteryManager.TransactOpts, _state)
}

// LotteryManagerRolloutCallbakTXFailedIterator is returned from FilterRolloutCallbakTXFailed and is used to iterate over the raw logs and unpacked data for RolloutCallbakTXFailed events raised by the LotteryManager contract.
type LotteryManagerRolloutCallbakTXFailedIterator struct {
	Event *LotteryManagerRolloutCallbakTXFailed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LotteryManagerRolloutCallbakTXFailedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LotteryManagerRolloutCallbakTXFailed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LotteryManagerRolloutCallbakTXFailed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LotteryManagerRolloutCallbakTXFailedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LotteryManagerRolloutCallbakTXFailedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LotteryManagerRolloutCallbakTXFailed represents a RolloutCallbakTXFailed event raised by the LotteryManager contract.
type LotteryManagerRolloutCallbakTXFailed struct {
	Arg0 common.Address
	Arg1 common.Address
	Arg2 *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterRolloutCallbakTXFailed is a free log retrieval operation binding the contract event 0x815c847eadf55cfbfcde61b55fef4e435c34cc6c53f70022cf7d206493746533.
//
// Solidity: event RolloutCallbakTXFailed(address arg0, address arg1, uint256 arg2)
func (_LotteryManager *LotteryManagerFilterer) FilterRolloutCallbakTXFailed(opts *bind.FilterOpts) (*LotteryManagerRolloutCallbakTXFailedIterator, error) {

	logs, sub, err := _LotteryManager.contract.FilterLogs(opts, "RolloutCallbakTXFailed")
	if err != nil {
		return nil, err
	}
	return &LotteryManagerRolloutCallbakTXFailedIterator{contract: _LotteryManager.contract, event: "RolloutCallbakTXFailed", logs: logs, sub: sub}, nil
}

// WatchRolloutCallbakTXFailed is a free log subscription operation binding the contract event 0x815c847eadf55cfbfcde61b55fef4e435c34cc6c53f70022cf7d206493746533.
//
// Solidity: event RolloutCallbakTXFailed(address arg0, address arg1, uint256 arg2)
func (_LotteryManager *LotteryManagerFilterer) WatchRolloutCallbakTXFailed(opts *bind.WatchOpts, sink chan<- *LotteryManagerRolloutCallbakTXFailed) (event.Subscription, error) {

	logs, sub, err := _LotteryManager.contract.WatchLogs(opts, "RolloutCallbakTXFailed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LotteryManagerRolloutCallbakTXFailed)
				if err := _LotteryManager.contract.UnpackLog(event, "RolloutCallbakTXFailed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRolloutCallbakTXFailed is a log parse operation binding the contract event 0x815c847eadf55cfbfcde61b55fef4e435c34cc6c53f70022cf7d206493746533.
//
// Solidity: event RolloutCallbakTXFailed(address arg0, address arg1, uint256 arg2)
func (_LotteryManager *LotteryManagerFilterer) ParseRolloutCallbakTXFailed(log types.Log) (*LotteryManagerRolloutCallbakTXFailed, error) {
	event := new(LotteryManagerRolloutCallbakTXFailed)
	if err := _LotteryManager.contract.UnpackLog(event, "RolloutCallbakTXFailed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LotteryManagerTransStateIterator is returned from FilterTransState and is used to iterate over the raw logs and unpacked data for TransState events raised by the LotteryManager contract.
type LotteryManagerTransStateIterator struct {
	Event *LotteryManagerTransState // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LotteryManagerTransStateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LotteryManagerTransState)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LotteryManagerTransState)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LotteryManagerTransStateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LotteryManagerTransStateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LotteryManagerTransState represents a TransState event raised by the LotteryManager contract.
type LotteryManagerTransState struct {
	Arg0 uint8
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterTransState is a free log retrieval operation binding the contract event 0x98fc7cdc63654fe293b3e70579dbda40dcc07d071258063515378560aa97fe01.
//
// Solidity: event TransState(uint8 arg0)
func (_LotteryManager *LotteryManagerFilterer) FilterTransState(opts *bind.FilterOpts) (*LotteryManagerTransStateIterator, error) {

	logs, sub, err := _LotteryManager.contract.FilterLogs(opts, "TransState")
	if err != nil {
		return nil, err
	}
	return &LotteryManagerTransStateIterator{contract: _LotteryManager.contract, event: "TransState", logs: logs, sub: sub}, nil
}

// WatchTransState is a free log subscription operation binding the contract event 0x98fc7cdc63654fe293b3e70579dbda40dcc07d071258063515378560aa97fe01.
//
// Solidity: event TransState(uint8 arg0)
func (_LotteryManager *LotteryManagerFilterer) WatchTransState(opts *bind.WatchOpts, sink chan<- *LotteryManagerTransState) (event.Subscription, error) {

	logs, sub, err := _LotteryManager.contract.WatchLogs(opts, "TransState")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LotteryManagerTransState)
				if err := _LotteryManager.contract.UnpackLog(event, "TransState", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransState is a log parse operation binding the contract event 0x98fc7cdc63654fe293b3e70579dbda40dcc07d071258063515378560aa97fe01.
//
// Solidity: event TransState(uint8 arg0)
func (_LotteryManager *LotteryManagerFilterer) ParseTransState(log types.Log) (*LotteryManagerTransState, error) {
	event := new(LotteryManagerTransState)
	if err := _LotteryManager.contract.UnpackLog(event, "TransState", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
