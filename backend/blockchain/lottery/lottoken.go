// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package lottery

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// LOTTokenMetaData contains all meta data concerning the LOTToken contract.
var LOTTokenMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"ERC2612ExpiredSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC2612InvalidSigner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stablecoin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lotAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stablecoinAmount\",\"type\":\"uint256\"}],\"name\":\"LOTExchanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stablecoin\",\"type\":\"address\"}],\"name\":\"StablecoinRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stablecoin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"StablecoinUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stablecoin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stablecoinAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lotAmount\",\"type\":\"uint256\"}],\"name\":\"TokensExchanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"placeAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"target\",\"type\":\"uint256[]\"}],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stablecoinAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"exchangeForLOT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stablecoinAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lotAmount\",\"type\":\"uint256\"}],\"name\":\"exchangeForStablecoin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReleased\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stablecoinAddress\",\"type\":\"address\"}],\"name\":\"getStablecoinInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupportedStablecoinsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stablecoinAddress\",\"type\":\"address\"}],\"name\":\"removeStablecoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setReleased\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stablecoinAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"setStablecoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stablecoins\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isSupported\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supportedStablecoinsList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "",
}

// LOTTokenABI is the input ABI used to generate the binding from.
// Deprecated: Use LOTTokenMetaData.ABI instead.
var LOTTokenABI = LOTTokenMetaData.ABI

// LOTTokenBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use LOTTokenMetaData.Bin instead.
var LOTTokenBin = LOTTokenMetaData.Bin

// DeployLOTToken deploys a new Ethereum contract, binding an instance of LOTToken to it.
func DeployLOTToken(auth *bind.TransactOpts, backend bind.ContractBackend, initialSupply *big.Int) (common.Address, *types.Transaction, *LOTToken, error) {
	parsed, err := LOTTokenMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(LOTTokenBin), backend, initialSupply)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &LOTToken{LOTTokenCaller: LOTTokenCaller{contract: contract}, LOTTokenTransactor: LOTTokenTransactor{contract: contract}, LOTTokenFilterer: LOTTokenFilterer{contract: contract}}, nil
}

// LOTToken is an auto generated Go binding around an Ethereum contract.
type LOTToken struct {
	LOTTokenCaller     // Read-only binding to the contract
	LOTTokenTransactor // Write-only binding to the contract
	LOTTokenFilterer   // Log filterer for contract events
}

// LOTTokenCaller is an auto generated read-only Go binding around an Ethereum contract.
type LOTTokenCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LOTTokenTransactor is an auto generated write-only Go binding around an Ethereum contract.
type LOTTokenTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LOTTokenFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type LOTTokenFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LOTTokenSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type LOTTokenSession struct {
	Contract     *LOTToken         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// LOTTokenCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type LOTTokenCallerSession struct {
	Contract *LOTTokenCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// LOTTokenTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type LOTTokenTransactorSession struct {
	Contract     *LOTTokenTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// LOTTokenRaw is an auto generated low-level Go binding around an Ethereum contract.
type LOTTokenRaw struct {
	Contract *LOTToken // Generic contract binding to access the raw methods on
}

// LOTTokenCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type LOTTokenCallerRaw struct {
	Contract *LOTTokenCaller // Generic read-only contract binding to access the raw methods on
}

// LOTTokenTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type LOTTokenTransactorRaw struct {
	Contract *LOTTokenTransactor // Generic write-only contract binding to access the raw methods on
}

// NewLOTToken creates a new instance of LOTToken, bound to a specific deployed contract.
func NewLOTToken(address common.Address, backend bind.ContractBackend) (*LOTToken, error) {
	contract, err := bindLOTToken(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &LOTToken{LOTTokenCaller: LOTTokenCaller{contract: contract}, LOTTokenTransactor: LOTTokenTransactor{contract: contract}, LOTTokenFilterer: LOTTokenFilterer{contract: contract}}, nil
}

// NewLOTTokenCaller creates a new read-only instance of LOTToken, bound to a specific deployed contract.
func NewLOTTokenCaller(address common.Address, caller bind.ContractCaller) (*LOTTokenCaller, error) {
	contract, err := bindLOTToken(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &LOTTokenCaller{contract: contract}, nil
}

// NewLOTTokenTransactor creates a new write-only instance of LOTToken, bound to a specific deployed contract.
func NewLOTTokenTransactor(address common.Address, transactor bind.ContractTransactor) (*LOTTokenTransactor, error) {
	contract, err := bindLOTToken(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &LOTTokenTransactor{contract: contract}, nil
}

// NewLOTTokenFilterer creates a new log filterer instance of LOTToken, bound to a specific deployed contract.
func NewLOTTokenFilterer(address common.Address, filterer bind.ContractFilterer) (*LOTTokenFilterer, error) {
	contract, err := bindLOTToken(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &LOTTokenFilterer{contract: contract}, nil
}

// bindLOTToken binds a generic wrapper to an already deployed contract.
func bindLOTToken(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := LOTTokenMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LOTToken *LOTTokenRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LOTToken.Contract.LOTTokenCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LOTToken *LOTTokenRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LOTToken.Contract.LOTTokenTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LOTToken *LOTTokenRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LOTToken.Contract.LOTTokenTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LOTToken *LOTTokenCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LOTToken.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LOTToken *LOTTokenTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LOTToken.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LOTToken *LOTTokenTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LOTToken.Contract.contract.Transact(opts, method, params...)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_LOTToken *LOTTokenCaller) DOMAINSEPARATOR(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _LOTToken.contract.Call(opts, &out, "DOMAIN_SEPARATOR")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_LOTToken *LOTTokenSession) DOMAINSEPARATOR() ([32]byte, error) {
	return _LOTToken.Contract.DOMAINSEPARATOR(&_LOTToken.CallOpts)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_LOTToken *LOTTokenCallerSession) DOMAINSEPARATOR() ([32]byte, error) {
	return _LOTToken.Contract.DOMAINSEPARATOR(&_LOTToken.CallOpts)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_LOTToken *LOTTokenCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _LOTToken.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_LOTToken *LOTTokenSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _LOTToken.Contract.Allowance(&_LOTToken.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_LOTToken *LOTTokenCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _LOTToken.Contract.Allowance(&_LOTToken.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_LOTToken *LOTTokenCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _LOTToken.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_LOTToken *LOTTokenSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _LOTToken.Contract.BalanceOf(&_LOTToken.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_LOTToken *LOTTokenCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _LOTToken.Contract.BalanceOf(&_LOTToken.CallOpts, account)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_LOTToken *LOTTokenCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _LOTToken.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_LOTToken *LOTTokenSession) Decimals() (uint8, error) {
	return _LOTToken.Contract.Decimals(&_LOTToken.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_LOTToken *LOTTokenCallerSession) Decimals() (uint8, error) {
	return _LOTToken.Contract.Decimals(&_LOTToken.CallOpts)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_LOTToken *LOTTokenCaller) Eip712Domain(opts *bind.CallOpts) (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	var out []interface{}
	err := _LOTToken.contract.Call(opts, &out, "eip712Domain")

	outstruct := new(struct {
		Fields            [1]byte
		Name              string
		Version           string
		ChainId           *big.Int
		VerifyingContract common.Address
		Salt              [32]byte
		Extensions        []*big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Fields = *abi.ConvertType(out[0], new([1]byte)).(*[1]byte)
	outstruct.Name = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.Version = *abi.ConvertType(out[2], new(string)).(*string)
	outstruct.ChainId = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.VerifyingContract = *abi.ConvertType(out[4], new(common.Address)).(*common.Address)
	outstruct.Salt = *abi.ConvertType(out[5], new([32]byte)).(*[32]byte)
	outstruct.Extensions = *abi.ConvertType(out[6], new([]*big.Int)).(*[]*big.Int)

	return *outstruct, err

}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_LOTToken *LOTTokenSession) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _LOTToken.Contract.Eip712Domain(&_LOTToken.CallOpts)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_LOTToken *LOTTokenCallerSession) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _LOTToken.Contract.Eip712Domain(&_LOTToken.CallOpts)
}

// GetReleased is a free data retrieval call binding the contract method 0xf47a6e84.
//
// Solidity: function getReleased() view returns(bool)
func (_LOTToken *LOTTokenCaller) GetReleased(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _LOTToken.contract.Call(opts, &out, "getReleased")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// GetReleased is a free data retrieval call binding the contract method 0xf47a6e84.
//
// Solidity: function getReleased() view returns(bool)
func (_LOTToken *LOTTokenSession) GetReleased() (bool, error) {
	return _LOTToken.Contract.GetReleased(&_LOTToken.CallOpts)
}

// GetReleased is a free data retrieval call binding the contract method 0xf47a6e84.
//
// Solidity: function getReleased() view returns(bool)
func (_LOTToken *LOTTokenCallerSession) GetReleased() (bool, error) {
	return _LOTToken.Contract.GetReleased(&_LOTToken.CallOpts)
}

// GetStablecoinInfo is a free data retrieval call binding the contract method 0x60e74f56.
//
// Solidity: function getStablecoinInfo(address stablecoinAddress) view returns(string, uint256, address, bool)
func (_LOTToken *LOTTokenCaller) GetStablecoinInfo(opts *bind.CallOpts, stablecoinAddress common.Address) (string, *big.Int, common.Address, bool, error) {
	var out []interface{}
	err := _LOTToken.contract.Call(opts, &out, "getStablecoinInfo", stablecoinAddress)

	if err != nil {
		return *new(string), *new(*big.Int), *new(common.Address), *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	out2 := *abi.ConvertType(out[2], new(common.Address)).(*common.Address)
	out3 := *abi.ConvertType(out[3], new(bool)).(*bool)

	return out0, out1, out2, out3, err

}

// GetStablecoinInfo is a free data retrieval call binding the contract method 0x60e74f56.
//
// Solidity: function getStablecoinInfo(address stablecoinAddress) view returns(string, uint256, address, bool)
func (_LOTToken *LOTTokenSession) GetStablecoinInfo(stablecoinAddress common.Address) (string, *big.Int, common.Address, bool, error) {
	return _LOTToken.Contract.GetStablecoinInfo(&_LOTToken.CallOpts, stablecoinAddress)
}

// GetStablecoinInfo is a free data retrieval call binding the contract method 0x60e74f56.
//
// Solidity: function getStablecoinInfo(address stablecoinAddress) view returns(string, uint256, address, bool)
func (_LOTToken *LOTTokenCallerSession) GetStablecoinInfo(stablecoinAddress common.Address) (string, *big.Int, common.Address, bool, error) {
	return _LOTToken.Contract.GetStablecoinInfo(&_LOTToken.CallOpts, stablecoinAddress)
}

// GetSupportedStablecoinsCount is a free data retrieval call binding the contract method 0x587a3965.
//
// Solidity: function getSupportedStablecoinsCount() view returns(uint256)
func (_LOTToken *LOTTokenCaller) GetSupportedStablecoinsCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _LOTToken.contract.Call(opts, &out, "getSupportedStablecoinsCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetSupportedStablecoinsCount is a free data retrieval call binding the contract method 0x587a3965.
//
// Solidity: function getSupportedStablecoinsCount() view returns(uint256)
func (_LOTToken *LOTTokenSession) GetSupportedStablecoinsCount() (*big.Int, error) {
	return _LOTToken.Contract.GetSupportedStablecoinsCount(&_LOTToken.CallOpts)
}

// GetSupportedStablecoinsCount is a free data retrieval call binding the contract method 0x587a3965.
//
// Solidity: function getSupportedStablecoinsCount() view returns(uint256)
func (_LOTToken *LOTTokenCallerSession) GetSupportedStablecoinsCount() (*big.Int, error) {
	return _LOTToken.Contract.GetSupportedStablecoinsCount(&_LOTToken.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_LOTToken *LOTTokenCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _LOTToken.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_LOTToken *LOTTokenSession) Name() (string, error) {
	return _LOTToken.Contract.Name(&_LOTToken.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_LOTToken *LOTTokenCallerSession) Name() (string, error) {
	return _LOTToken.Contract.Name(&_LOTToken.CallOpts)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_LOTToken *LOTTokenCaller) Nonces(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _LOTToken.contract.Call(opts, &out, "nonces", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_LOTToken *LOTTokenSession) Nonces(owner common.Address) (*big.Int, error) {
	return _LOTToken.Contract.Nonces(&_LOTToken.CallOpts, owner)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_LOTToken *LOTTokenCallerSession) Nonces(owner common.Address) (*big.Int, error) {
	return _LOTToken.Contract.Nonces(&_LOTToken.CallOpts, owner)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_LOTToken *LOTTokenCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _LOTToken.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_LOTToken *LOTTokenSession) Owner() (common.Address, error) {
	return _LOTToken.Contract.Owner(&_LOTToken.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_LOTToken *LOTTokenCallerSession) Owner() (common.Address, error) {
	return _LOTToken.Contract.Owner(&_LOTToken.CallOpts)
}

// Stablecoins is a free data retrieval call binding the contract method 0xfa847836.
//
// Solidity: function stablecoins(address ) view returns(string name, uint256 rate, address receiver, bool isSupported)
func (_LOTToken *LOTTokenCaller) Stablecoins(opts *bind.CallOpts, arg0 common.Address) (struct {
	Name        string
	Rate        *big.Int
	Receiver    common.Address
	IsSupported bool
}, error) {
	var out []interface{}
	err := _LOTToken.contract.Call(opts, &out, "stablecoins", arg0)

	outstruct := new(struct {
		Name        string
		Rate        *big.Int
		Receiver    common.Address
		IsSupported bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Name = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.Rate = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Receiver = *abi.ConvertType(out[2], new(common.Address)).(*common.Address)
	outstruct.IsSupported = *abi.ConvertType(out[3], new(bool)).(*bool)

	return *outstruct, err

}

// Stablecoins is a free data retrieval call binding the contract method 0xfa847836.
//
// Solidity: function stablecoins(address ) view returns(string name, uint256 rate, address receiver, bool isSupported)
func (_LOTToken *LOTTokenSession) Stablecoins(arg0 common.Address) (struct {
	Name        string
	Rate        *big.Int
	Receiver    common.Address
	IsSupported bool
}, error) {
	return _LOTToken.Contract.Stablecoins(&_LOTToken.CallOpts, arg0)
}

// Stablecoins is a free data retrieval call binding the contract method 0xfa847836.
//
// Solidity: function stablecoins(address ) view returns(string name, uint256 rate, address receiver, bool isSupported)
func (_LOTToken *LOTTokenCallerSession) Stablecoins(arg0 common.Address) (struct {
	Name        string
	Rate        *big.Int
	Receiver    common.Address
	IsSupported bool
}, error) {
	return _LOTToken.Contract.Stablecoins(&_LOTToken.CallOpts, arg0)
}

// SupportedStablecoinsList is a free data retrieval call binding the contract method 0xeb3f952f.
//
// Solidity: function supportedStablecoinsList(uint256 ) view returns(address)
func (_LOTToken *LOTTokenCaller) SupportedStablecoinsList(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _LOTToken.contract.Call(opts, &out, "supportedStablecoinsList", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SupportedStablecoinsList is a free data retrieval call binding the contract method 0xeb3f952f.
//
// Solidity: function supportedStablecoinsList(uint256 ) view returns(address)
func (_LOTToken *LOTTokenSession) SupportedStablecoinsList(arg0 *big.Int) (common.Address, error) {
	return _LOTToken.Contract.SupportedStablecoinsList(&_LOTToken.CallOpts, arg0)
}

// SupportedStablecoinsList is a free data retrieval call binding the contract method 0xeb3f952f.
//
// Solidity: function supportedStablecoinsList(uint256 ) view returns(address)
func (_LOTToken *LOTTokenCallerSession) SupportedStablecoinsList(arg0 *big.Int) (common.Address, error) {
	return _LOTToken.Contract.SupportedStablecoinsList(&_LOTToken.CallOpts, arg0)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_LOTToken *LOTTokenCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _LOTToken.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_LOTToken *LOTTokenSession) Symbol() (string, error) {
	return _LOTToken.Contract.Symbol(&_LOTToken.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_LOTToken *LOTTokenCallerSession) Symbol() (string, error) {
	return _LOTToken.Contract.Symbol(&_LOTToken.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_LOTToken *LOTTokenCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _LOTToken.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_LOTToken *LOTTokenSession) TotalSupply() (*big.Int, error) {
	return _LOTToken.Contract.TotalSupply(&_LOTToken.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_LOTToken *LOTTokenCallerSession) TotalSupply() (*big.Int, error) {
	return _LOTToken.Contract.TotalSupply(&_LOTToken.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_LOTToken *LOTTokenTransactor) Approve(opts *bind.TransactOpts, spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _LOTToken.contract.Transact(opts, "approve", spender, value)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_LOTToken *LOTTokenSession) Approve(spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _LOTToken.Contract.Approve(&_LOTToken.TransactOpts, spender, value)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_LOTToken *LOTTokenTransactorSession) Approve(spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _LOTToken.Contract.Approve(&_LOTToken.TransactOpts, spender, value)
}

// Buy is a paid mutator transaction binding the contract method 0x643f8580.
//
// Solidity: function buy(address placeAddr, uint256 _amount, uint256[] target) returns(bool)
func (_LOTToken *LOTTokenTransactor) Buy(opts *bind.TransactOpts, placeAddr common.Address, _amount *big.Int, target []*big.Int) (*types.Transaction, error) {
	return _LOTToken.contract.Transact(opts, "buy", placeAddr, _amount, target)
}

// Buy is a paid mutator transaction binding the contract method 0x643f8580.
//
// Solidity: function buy(address placeAddr, uint256 _amount, uint256[] target) returns(bool)
func (_LOTToken *LOTTokenSession) Buy(placeAddr common.Address, _amount *big.Int, target []*big.Int) (*types.Transaction, error) {
	return _LOTToken.Contract.Buy(&_LOTToken.TransactOpts, placeAddr, _amount, target)
}

// Buy is a paid mutator transaction binding the contract method 0x643f8580.
//
// Solidity: function buy(address placeAddr, uint256 _amount, uint256[] target) returns(bool)
func (_LOTToken *LOTTokenTransactorSession) Buy(placeAddr common.Address, _amount *big.Int, target []*big.Int) (*types.Transaction, error) {
	return _LOTToken.Contract.Buy(&_LOTToken.TransactOpts, placeAddr, _amount, target)
}

// ExchangeForLOT is a paid mutator transaction binding the contract method 0xe8120402.
//
// Solidity: function exchangeForLOT(address stablecoinAddress, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns(uint256)
func (_LOTToken *LOTTokenTransactor) ExchangeForLOT(opts *bind.TransactOpts, stablecoinAddress common.Address, amount *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _LOTToken.contract.Transact(opts, "exchangeForLOT", stablecoinAddress, amount, deadline, v, r, s)
}

// ExchangeForLOT is a paid mutator transaction binding the contract method 0xe8120402.
//
// Solidity: function exchangeForLOT(address stablecoinAddress, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns(uint256)
func (_LOTToken *LOTTokenSession) ExchangeForLOT(stablecoinAddress common.Address, amount *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _LOTToken.Contract.ExchangeForLOT(&_LOTToken.TransactOpts, stablecoinAddress, amount, deadline, v, r, s)
}

// ExchangeForLOT is a paid mutator transaction binding the contract method 0xe8120402.
//
// Solidity: function exchangeForLOT(address stablecoinAddress, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns(uint256)
func (_LOTToken *LOTTokenTransactorSession) ExchangeForLOT(stablecoinAddress common.Address, amount *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _LOTToken.Contract.ExchangeForLOT(&_LOTToken.TransactOpts, stablecoinAddress, amount, deadline, v, r, s)
}

// ExchangeForStablecoin is a paid mutator transaction binding the contract method 0x9f9e9760.
//
// Solidity: function exchangeForStablecoin(address stablecoinAddress, uint256 lotAmount) returns(uint256)
func (_LOTToken *LOTTokenTransactor) ExchangeForStablecoin(opts *bind.TransactOpts, stablecoinAddress common.Address, lotAmount *big.Int) (*types.Transaction, error) {
	return _LOTToken.contract.Transact(opts, "exchangeForStablecoin", stablecoinAddress, lotAmount)
}

// ExchangeForStablecoin is a paid mutator transaction binding the contract method 0x9f9e9760.
//
// Solidity: function exchangeForStablecoin(address stablecoinAddress, uint256 lotAmount) returns(uint256)
func (_LOTToken *LOTTokenSession) ExchangeForStablecoin(stablecoinAddress common.Address, lotAmount *big.Int) (*types.Transaction, error) {
	return _LOTToken.Contract.ExchangeForStablecoin(&_LOTToken.TransactOpts, stablecoinAddress, lotAmount)
}

// ExchangeForStablecoin is a paid mutator transaction binding the contract method 0x9f9e9760.
//
// Solidity: function exchangeForStablecoin(address stablecoinAddress, uint256 lotAmount) returns(uint256)
func (_LOTToken *LOTTokenTransactorSession) ExchangeForStablecoin(stablecoinAddress common.Address, lotAmount *big.Int) (*types.Transaction, error) {
	return _LOTToken.Contract.ExchangeForStablecoin(&_LOTToken.TransactOpts, stablecoinAddress, lotAmount)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_LOTToken *LOTTokenTransactor) Permit(opts *bind.TransactOpts, owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _LOTToken.contract.Transact(opts, "permit", owner, spender, value, deadline, v, r, s)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_LOTToken *LOTTokenSession) Permit(owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _LOTToken.Contract.Permit(&_LOTToken.TransactOpts, owner, spender, value, deadline, v, r, s)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_LOTToken *LOTTokenTransactorSession) Permit(owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _LOTToken.Contract.Permit(&_LOTToken.TransactOpts, owner, spender, value, deadline, v, r, s)
}

// RemoveStablecoin is a paid mutator transaction binding the contract method 0x3b947d2b.
//
// Solidity: function removeStablecoin(address stablecoinAddress) returns()
func (_LOTToken *LOTTokenTransactor) RemoveStablecoin(opts *bind.TransactOpts, stablecoinAddress common.Address) (*types.Transaction, error) {
	return _LOTToken.contract.Transact(opts, "removeStablecoin", stablecoinAddress)
}

// RemoveStablecoin is a paid mutator transaction binding the contract method 0x3b947d2b.
//
// Solidity: function removeStablecoin(address stablecoinAddress) returns()
func (_LOTToken *LOTTokenSession) RemoveStablecoin(stablecoinAddress common.Address) (*types.Transaction, error) {
	return _LOTToken.Contract.RemoveStablecoin(&_LOTToken.TransactOpts, stablecoinAddress)
}

// RemoveStablecoin is a paid mutator transaction binding the contract method 0x3b947d2b.
//
// Solidity: function removeStablecoin(address stablecoinAddress) returns()
func (_LOTToken *LOTTokenTransactorSession) RemoveStablecoin(stablecoinAddress common.Address) (*types.Transaction, error) {
	return _LOTToken.Contract.RemoveStablecoin(&_LOTToken.TransactOpts, stablecoinAddress)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_LOTToken *LOTTokenTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LOTToken.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_LOTToken *LOTTokenSession) RenounceOwnership() (*types.Transaction, error) {
	return _LOTToken.Contract.RenounceOwnership(&_LOTToken.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_LOTToken *LOTTokenTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _LOTToken.Contract.RenounceOwnership(&_LOTToken.TransactOpts)
}

// SetReleased is a paid mutator transaction binding the contract method 0xd6fd2e8e.
//
// Solidity: function setReleased() returns()
func (_LOTToken *LOTTokenTransactor) SetReleased(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LOTToken.contract.Transact(opts, "setReleased")
}

// SetReleased is a paid mutator transaction binding the contract method 0xd6fd2e8e.
//
// Solidity: function setReleased() returns()
func (_LOTToken *LOTTokenSession) SetReleased() (*types.Transaction, error) {
	return _LOTToken.Contract.SetReleased(&_LOTToken.TransactOpts)
}

// SetReleased is a paid mutator transaction binding the contract method 0xd6fd2e8e.
//
// Solidity: function setReleased() returns()
func (_LOTToken *LOTTokenTransactorSession) SetReleased() (*types.Transaction, error) {
	return _LOTToken.Contract.SetReleased(&_LOTToken.TransactOpts)
}

// SetStablecoin is a paid mutator transaction binding the contract method 0xc91357c7.
//
// Solidity: function setStablecoin(address stablecoinAddress, string name, uint256 rate, address receiver) returns()
func (_LOTToken *LOTTokenTransactor) SetStablecoin(opts *bind.TransactOpts, stablecoinAddress common.Address, name string, rate *big.Int, receiver common.Address) (*types.Transaction, error) {
	return _LOTToken.contract.Transact(opts, "setStablecoin", stablecoinAddress, name, rate, receiver)
}

// SetStablecoin is a paid mutator transaction binding the contract method 0xc91357c7.
//
// Solidity: function setStablecoin(address stablecoinAddress, string name, uint256 rate, address receiver) returns()
func (_LOTToken *LOTTokenSession) SetStablecoin(stablecoinAddress common.Address, name string, rate *big.Int, receiver common.Address) (*types.Transaction, error) {
	return _LOTToken.Contract.SetStablecoin(&_LOTToken.TransactOpts, stablecoinAddress, name, rate, receiver)
}

// SetStablecoin is a paid mutator transaction binding the contract method 0xc91357c7.
//
// Solidity: function setStablecoin(address stablecoinAddress, string name, uint256 rate, address receiver) returns()
func (_LOTToken *LOTTokenTransactorSession) SetStablecoin(stablecoinAddress common.Address, name string, rate *big.Int, receiver common.Address) (*types.Transaction, error) {
	return _LOTToken.Contract.SetStablecoin(&_LOTToken.TransactOpts, stablecoinAddress, name, rate, receiver)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_LOTToken *LOTTokenTransactor) Transfer(opts *bind.TransactOpts, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _LOTToken.contract.Transact(opts, "transfer", to, value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_LOTToken *LOTTokenSession) Transfer(to common.Address, value *big.Int) (*types.Transaction, error) {
	return _LOTToken.Contract.Transfer(&_LOTToken.TransactOpts, to, value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_LOTToken *LOTTokenTransactorSession) Transfer(to common.Address, value *big.Int) (*types.Transaction, error) {
	return _LOTToken.Contract.Transfer(&_LOTToken.TransactOpts, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_LOTToken *LOTTokenTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _LOTToken.contract.Transact(opts, "transferFrom", from, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_LOTToken *LOTTokenSession) TransferFrom(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _LOTToken.Contract.TransferFrom(&_LOTToken.TransactOpts, from, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_LOTToken *LOTTokenTransactorSession) TransferFrom(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _LOTToken.Contract.TransferFrom(&_LOTToken.TransactOpts, from, to, value)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_LOTToken *LOTTokenTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _LOTToken.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_LOTToken *LOTTokenSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _LOTToken.Contract.TransferOwnership(&_LOTToken.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_LOTToken *LOTTokenTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _LOTToken.Contract.TransferOwnership(&_LOTToken.TransactOpts, newOwner)
}

// LOTTokenApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the LOTToken contract.
type LOTTokenApprovalIterator struct {
	Event *LOTTokenApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LOTTokenApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LOTTokenApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LOTTokenApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LOTTokenApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LOTTokenApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LOTTokenApproval represents a Approval event raised by the LOTToken contract.
type LOTTokenApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_LOTToken *LOTTokenFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*LOTTokenApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _LOTToken.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &LOTTokenApprovalIterator{contract: _LOTToken.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_LOTToken *LOTTokenFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *LOTTokenApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _LOTToken.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LOTTokenApproval)
				if err := _LOTToken.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_LOTToken *LOTTokenFilterer) ParseApproval(log types.Log) (*LOTTokenApproval, error) {
	event := new(LOTTokenApproval)
	if err := _LOTToken.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LOTTokenEIP712DomainChangedIterator is returned from FilterEIP712DomainChanged and is used to iterate over the raw logs and unpacked data for EIP712DomainChanged events raised by the LOTToken contract.
type LOTTokenEIP712DomainChangedIterator struct {
	Event *LOTTokenEIP712DomainChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LOTTokenEIP712DomainChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LOTTokenEIP712DomainChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LOTTokenEIP712DomainChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LOTTokenEIP712DomainChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LOTTokenEIP712DomainChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LOTTokenEIP712DomainChanged represents a EIP712DomainChanged event raised by the LOTToken contract.
type LOTTokenEIP712DomainChanged struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterEIP712DomainChanged is a free log retrieval operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_LOTToken *LOTTokenFilterer) FilterEIP712DomainChanged(opts *bind.FilterOpts) (*LOTTokenEIP712DomainChangedIterator, error) {

	logs, sub, err := _LOTToken.contract.FilterLogs(opts, "EIP712DomainChanged")
	if err != nil {
		return nil, err
	}
	return &LOTTokenEIP712DomainChangedIterator{contract: _LOTToken.contract, event: "EIP712DomainChanged", logs: logs, sub: sub}, nil
}

// WatchEIP712DomainChanged is a free log subscription operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_LOTToken *LOTTokenFilterer) WatchEIP712DomainChanged(opts *bind.WatchOpts, sink chan<- *LOTTokenEIP712DomainChanged) (event.Subscription, error) {

	logs, sub, err := _LOTToken.contract.WatchLogs(opts, "EIP712DomainChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LOTTokenEIP712DomainChanged)
				if err := _LOTToken.contract.UnpackLog(event, "EIP712DomainChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEIP712DomainChanged is a log parse operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_LOTToken *LOTTokenFilterer) ParseEIP712DomainChanged(log types.Log) (*LOTTokenEIP712DomainChanged, error) {
	event := new(LOTTokenEIP712DomainChanged)
	if err := _LOTToken.contract.UnpackLog(event, "EIP712DomainChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LOTTokenLOTExchangedIterator is returned from FilterLOTExchanged and is used to iterate over the raw logs and unpacked data for LOTExchanged events raised by the LOTToken contract.
type LOTTokenLOTExchangedIterator struct {
	Event *LOTTokenLOTExchanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LOTTokenLOTExchangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LOTTokenLOTExchanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LOTTokenLOTExchanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LOTTokenLOTExchangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LOTTokenLOTExchangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LOTTokenLOTExchanged represents a LOTExchanged event raised by the LOTToken contract.
type LOTTokenLOTExchanged struct {
	User             common.Address
	Stablecoin       common.Address
	LotAmount        *big.Int
	StablecoinAmount *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterLOTExchanged is a free log retrieval operation binding the contract event 0xfc6dde45c60c69954c97f71476d3252191ce43e2c4a7aec91806e6185de67887.
//
// Solidity: event LOTExchanged(address indexed user, address indexed stablecoin, uint256 lotAmount, uint256 stablecoinAmount)
func (_LOTToken *LOTTokenFilterer) FilterLOTExchanged(opts *bind.FilterOpts, user []common.Address, stablecoin []common.Address) (*LOTTokenLOTExchangedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var stablecoinRule []interface{}
	for _, stablecoinItem := range stablecoin {
		stablecoinRule = append(stablecoinRule, stablecoinItem)
	}

	logs, sub, err := _LOTToken.contract.FilterLogs(opts, "LOTExchanged", userRule, stablecoinRule)
	if err != nil {
		return nil, err
	}
	return &LOTTokenLOTExchangedIterator{contract: _LOTToken.contract, event: "LOTExchanged", logs: logs, sub: sub}, nil
}

// WatchLOTExchanged is a free log subscription operation binding the contract event 0xfc6dde45c60c69954c97f71476d3252191ce43e2c4a7aec91806e6185de67887.
//
// Solidity: event LOTExchanged(address indexed user, address indexed stablecoin, uint256 lotAmount, uint256 stablecoinAmount)
func (_LOTToken *LOTTokenFilterer) WatchLOTExchanged(opts *bind.WatchOpts, sink chan<- *LOTTokenLOTExchanged, user []common.Address, stablecoin []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var stablecoinRule []interface{}
	for _, stablecoinItem := range stablecoin {
		stablecoinRule = append(stablecoinRule, stablecoinItem)
	}

	logs, sub, err := _LOTToken.contract.WatchLogs(opts, "LOTExchanged", userRule, stablecoinRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LOTTokenLOTExchanged)
				if err := _LOTToken.contract.UnpackLog(event, "LOTExchanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLOTExchanged is a log parse operation binding the contract event 0xfc6dde45c60c69954c97f71476d3252191ce43e2c4a7aec91806e6185de67887.
//
// Solidity: event LOTExchanged(address indexed user, address indexed stablecoin, uint256 lotAmount, uint256 stablecoinAmount)
func (_LOTToken *LOTTokenFilterer) ParseLOTExchanged(log types.Log) (*LOTTokenLOTExchanged, error) {
	event := new(LOTTokenLOTExchanged)
	if err := _LOTToken.contract.UnpackLog(event, "LOTExchanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LOTTokenOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the LOTToken contract.
type LOTTokenOwnershipTransferredIterator struct {
	Event *LOTTokenOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LOTTokenOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LOTTokenOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LOTTokenOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LOTTokenOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LOTTokenOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LOTTokenOwnershipTransferred represents a OwnershipTransferred event raised by the LOTToken contract.
type LOTTokenOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_LOTToken *LOTTokenFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*LOTTokenOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _LOTToken.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &LOTTokenOwnershipTransferredIterator{contract: _LOTToken.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_LOTToken *LOTTokenFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *LOTTokenOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _LOTToken.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LOTTokenOwnershipTransferred)
				if err := _LOTToken.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_LOTToken *LOTTokenFilterer) ParseOwnershipTransferred(log types.Log) (*LOTTokenOwnershipTransferred, error) {
	event := new(LOTTokenOwnershipTransferred)
	if err := _LOTToken.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LOTTokenStablecoinRemovedIterator is returned from FilterStablecoinRemoved and is used to iterate over the raw logs and unpacked data for StablecoinRemoved events raised by the LOTToken contract.
type LOTTokenStablecoinRemovedIterator struct {
	Event *LOTTokenStablecoinRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LOTTokenStablecoinRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LOTTokenStablecoinRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LOTTokenStablecoinRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LOTTokenStablecoinRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LOTTokenStablecoinRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LOTTokenStablecoinRemoved represents a StablecoinRemoved event raised by the LOTToken contract.
type LOTTokenStablecoinRemoved struct {
	Stablecoin common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterStablecoinRemoved is a free log retrieval operation binding the contract event 0x3302a1b37f04242bb55603f5449e7ecd690a35eef08ba1353c48c20e2aae9cda.
//
// Solidity: event StablecoinRemoved(address indexed stablecoin)
func (_LOTToken *LOTTokenFilterer) FilterStablecoinRemoved(opts *bind.FilterOpts, stablecoin []common.Address) (*LOTTokenStablecoinRemovedIterator, error) {

	var stablecoinRule []interface{}
	for _, stablecoinItem := range stablecoin {
		stablecoinRule = append(stablecoinRule, stablecoinItem)
	}

	logs, sub, err := _LOTToken.contract.FilterLogs(opts, "StablecoinRemoved", stablecoinRule)
	if err != nil {
		return nil, err
	}
	return &LOTTokenStablecoinRemovedIterator{contract: _LOTToken.contract, event: "StablecoinRemoved", logs: logs, sub: sub}, nil
}

// WatchStablecoinRemoved is a free log subscription operation binding the contract event 0x3302a1b37f04242bb55603f5449e7ecd690a35eef08ba1353c48c20e2aae9cda.
//
// Solidity: event StablecoinRemoved(address indexed stablecoin)
func (_LOTToken *LOTTokenFilterer) WatchStablecoinRemoved(opts *bind.WatchOpts, sink chan<- *LOTTokenStablecoinRemoved, stablecoin []common.Address) (event.Subscription, error) {

	var stablecoinRule []interface{}
	for _, stablecoinItem := range stablecoin {
		stablecoinRule = append(stablecoinRule, stablecoinItem)
	}

	logs, sub, err := _LOTToken.contract.WatchLogs(opts, "StablecoinRemoved", stablecoinRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LOTTokenStablecoinRemoved)
				if err := _LOTToken.contract.UnpackLog(event, "StablecoinRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStablecoinRemoved is a log parse operation binding the contract event 0x3302a1b37f04242bb55603f5449e7ecd690a35eef08ba1353c48c20e2aae9cda.
//
// Solidity: event StablecoinRemoved(address indexed stablecoin)
func (_LOTToken *LOTTokenFilterer) ParseStablecoinRemoved(log types.Log) (*LOTTokenStablecoinRemoved, error) {
	event := new(LOTTokenStablecoinRemoved)
	if err := _LOTToken.contract.UnpackLog(event, "StablecoinRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LOTTokenStablecoinUpdatedIterator is returned from FilterStablecoinUpdated and is used to iterate over the raw logs and unpacked data for StablecoinUpdated events raised by the LOTToken contract.
type LOTTokenStablecoinUpdatedIterator struct {
	Event *LOTTokenStablecoinUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LOTTokenStablecoinUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LOTTokenStablecoinUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LOTTokenStablecoinUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LOTTokenStablecoinUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LOTTokenStablecoinUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LOTTokenStablecoinUpdated represents a StablecoinUpdated event raised by the LOTToken contract.
type LOTTokenStablecoinUpdated struct {
	Stablecoin common.Address
	Name       string
	Rate       *big.Int
	Receiver   common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterStablecoinUpdated is a free log retrieval operation binding the contract event 0xcc9386c98c5c2a003115422dc0330285d077229aa4414b964c041ea0edef707b.
//
// Solidity: event StablecoinUpdated(address indexed stablecoin, string name, uint256 rate, address receiver)
func (_LOTToken *LOTTokenFilterer) FilterStablecoinUpdated(opts *bind.FilterOpts, stablecoin []common.Address) (*LOTTokenStablecoinUpdatedIterator, error) {

	var stablecoinRule []interface{}
	for _, stablecoinItem := range stablecoin {
		stablecoinRule = append(stablecoinRule, stablecoinItem)
	}

	logs, sub, err := _LOTToken.contract.FilterLogs(opts, "StablecoinUpdated", stablecoinRule)
	if err != nil {
		return nil, err
	}
	return &LOTTokenStablecoinUpdatedIterator{contract: _LOTToken.contract, event: "StablecoinUpdated", logs: logs, sub: sub}, nil
}

// WatchStablecoinUpdated is a free log subscription operation binding the contract event 0xcc9386c98c5c2a003115422dc0330285d077229aa4414b964c041ea0edef707b.
//
// Solidity: event StablecoinUpdated(address indexed stablecoin, string name, uint256 rate, address receiver)
func (_LOTToken *LOTTokenFilterer) WatchStablecoinUpdated(opts *bind.WatchOpts, sink chan<- *LOTTokenStablecoinUpdated, stablecoin []common.Address) (event.Subscription, error) {

	var stablecoinRule []interface{}
	for _, stablecoinItem := range stablecoin {
		stablecoinRule = append(stablecoinRule, stablecoinItem)
	}

	logs, sub, err := _LOTToken.contract.WatchLogs(opts, "StablecoinUpdated", stablecoinRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LOTTokenStablecoinUpdated)
				if err := _LOTToken.contract.UnpackLog(event, "StablecoinUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStablecoinUpdated is a log parse operation binding the contract event 0xcc9386c98c5c2a003115422dc0330285d077229aa4414b964c041ea0edef707b.
//
// Solidity: event StablecoinUpdated(address indexed stablecoin, string name, uint256 rate, address receiver)
func (_LOTToken *LOTTokenFilterer) ParseStablecoinUpdated(log types.Log) (*LOTTokenStablecoinUpdated, error) {
	event := new(LOTTokenStablecoinUpdated)
	if err := _LOTToken.contract.UnpackLog(event, "StablecoinUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LOTTokenTokensExchangedIterator is returned from FilterTokensExchanged and is used to iterate over the raw logs and unpacked data for TokensExchanged events raised by the LOTToken contract.
type LOTTokenTokensExchangedIterator struct {
	Event *LOTTokenTokensExchanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LOTTokenTokensExchangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LOTTokenTokensExchanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LOTTokenTokensExchanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LOTTokenTokensExchangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LOTTokenTokensExchangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LOTTokenTokensExchanged represents a TokensExchanged event raised by the LOTToken contract.
type LOTTokenTokensExchanged struct {
	User             common.Address
	Stablecoin       common.Address
	StablecoinAmount *big.Int
	LotAmount        *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterTokensExchanged is a free log retrieval operation binding the contract event 0xc268aa3dfcf26d893e64804923970c993cb04f61bf2a8729638222b91b41a79a.
//
// Solidity: event TokensExchanged(address indexed user, address indexed stablecoin, uint256 stablecoinAmount, uint256 lotAmount)
func (_LOTToken *LOTTokenFilterer) FilterTokensExchanged(opts *bind.FilterOpts, user []common.Address, stablecoin []common.Address) (*LOTTokenTokensExchangedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var stablecoinRule []interface{}
	for _, stablecoinItem := range stablecoin {
		stablecoinRule = append(stablecoinRule, stablecoinItem)
	}

	logs, sub, err := _LOTToken.contract.FilterLogs(opts, "TokensExchanged", userRule, stablecoinRule)
	if err != nil {
		return nil, err
	}
	return &LOTTokenTokensExchangedIterator{contract: _LOTToken.contract, event: "TokensExchanged", logs: logs, sub: sub}, nil
}

// WatchTokensExchanged is a free log subscription operation binding the contract event 0xc268aa3dfcf26d893e64804923970c993cb04f61bf2a8729638222b91b41a79a.
//
// Solidity: event TokensExchanged(address indexed user, address indexed stablecoin, uint256 stablecoinAmount, uint256 lotAmount)
func (_LOTToken *LOTTokenFilterer) WatchTokensExchanged(opts *bind.WatchOpts, sink chan<- *LOTTokenTokensExchanged, user []common.Address, stablecoin []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var stablecoinRule []interface{}
	for _, stablecoinItem := range stablecoin {
		stablecoinRule = append(stablecoinRule, stablecoinItem)
	}

	logs, sub, err := _LOTToken.contract.WatchLogs(opts, "TokensExchanged", userRule, stablecoinRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LOTTokenTokensExchanged)
				if err := _LOTToken.contract.UnpackLog(event, "TokensExchanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTokensExchanged is a log parse operation binding the contract event 0xc268aa3dfcf26d893e64804923970c993cb04f61bf2a8729638222b91b41a79a.
//
// Solidity: event TokensExchanged(address indexed user, address indexed stablecoin, uint256 stablecoinAmount, uint256 lotAmount)
func (_LOTToken *LOTTokenFilterer) ParseTokensExchanged(log types.Log) (*LOTTokenTokensExchanged, error) {
	event := new(LOTTokenTokensExchanged)
	if err := _LOTToken.contract.UnpackLog(event, "TokensExchanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LOTTokenTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the LOTToken contract.
type LOTTokenTransferIterator struct {
	Event *LOTTokenTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LOTTokenTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LOTTokenTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LOTTokenTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LOTTokenTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LOTTokenTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LOTTokenTransfer represents a Transfer event raised by the LOTToken contract.
type LOTTokenTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_LOTToken *LOTTokenFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*LOTTokenTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _LOTToken.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &LOTTokenTransferIterator{contract: _LOTToken.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_LOTToken *LOTTokenFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *LOTTokenTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _LOTToken.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LOTTokenTransfer)
				if err := _LOTToken.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_LOTToken *LOTTokenFilterer) ParseTransfer(log types.Log) (*LOTTokenTransfer, error) {
	event := new(LOTTokenTransfer)
	if err := _LOTToken.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
