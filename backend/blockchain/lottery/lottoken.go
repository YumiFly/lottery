// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package lottery

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// LotteryMetaData contains all meta data concerning the Lottery contract.
var LotteryMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"ERC2612ExpiredSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC2612InvalidSigner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stablecoin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lotAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stablecoinAmount\",\"type\":\"uint256\"}],\"name\":\"LOTExchanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stablecoin\",\"type\":\"address\"}],\"name\":\"StablecoinRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stablecoin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"StablecoinUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stablecoin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stablecoinAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lotAmount\",\"type\":\"uint256\"}],\"name\":\"TokensExchanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"placeAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"target\",\"type\":\"uint256[]\"}],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stablecoinAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"exchangeForLOT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stablecoinAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lotAmount\",\"type\":\"uint256\"}],\"name\":\"exchangeForStablecoin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReleased\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stablecoinAddress\",\"type\":\"address\"}],\"name\":\"getStablecoinInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupportedStablecoinsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stablecoinAddress\",\"type\":\"address\"}],\"name\":\"removeStablecoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setReleased\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stablecoinAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"setStablecoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stablecoins\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isSupported\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supportedStablecoinsList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "",
}

// LotteryABI is the input ABI used to generate the binding from.
// Deprecated: Use LotteryMetaData.ABI instead.
var LotteryABI = LotteryMetaData.ABI

// LotteryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use LotteryMetaData.Bin instead.
var LotteryBin = LotteryMetaData.Bin

// DeployLottery deploys a new Ethereum contract, binding an instance of Lottery to it.
func DeployLottery(auth *bind.TransactOpts, backend bind.ContractBackend, initialSupply *big.Int) (common.Address, *types.Transaction, *Lottery, error) {
	parsed, err := LotteryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(LotteryBin), backend, initialSupply)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Lottery{LotteryCaller: LotteryCaller{contract: contract}, LotteryTransactor: LotteryTransactor{contract: contract}, LotteryFilterer: LotteryFilterer{contract: contract}}, nil
}

// Lottery is an auto generated Go binding around an Ethereum contract.
type Lottery struct {
	LotteryCaller     // Read-only binding to the contract
	LotteryTransactor // Write-only binding to the contract
	LotteryFilterer   // Log filterer for contract events
}

// LotteryCaller is an auto generated read-only Go binding around an Ethereum contract.
type LotteryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LotteryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type LotteryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LotteryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type LotteryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LotterySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type LotterySession struct {
	Contract     *Lottery          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// LotteryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type LotteryCallerSession struct {
	Contract *LotteryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// LotteryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type LotteryTransactorSession struct {
	Contract     *LotteryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// LotteryRaw is an auto generated low-level Go binding around an Ethereum contract.
type LotteryRaw struct {
	Contract *Lottery // Generic contract binding to access the raw methods on
}

// LotteryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type LotteryCallerRaw struct {
	Contract *LotteryCaller // Generic read-only contract binding to access the raw methods on
}

// LotteryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type LotteryTransactorRaw struct {
	Contract *LotteryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewLottery creates a new instance of Lottery, bound to a specific deployed contract.
func NewLottery(address common.Address, backend bind.ContractBackend) (*Lottery, error) {
	contract, err := bindLottery(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Lottery{LotteryCaller: LotteryCaller{contract: contract}, LotteryTransactor: LotteryTransactor{contract: contract}, LotteryFilterer: LotteryFilterer{contract: contract}}, nil
}

// NewLotteryCaller creates a new read-only instance of Lottery, bound to a specific deployed contract.
func NewLotteryCaller(address common.Address, caller bind.ContractCaller) (*LotteryCaller, error) {
	contract, err := bindLottery(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &LotteryCaller{contract: contract}, nil
}

// NewLotteryTransactor creates a new write-only instance of Lottery, bound to a specific deployed contract.
func NewLotteryTransactor(address common.Address, transactor bind.ContractTransactor) (*LotteryTransactor, error) {
	contract, err := bindLottery(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &LotteryTransactor{contract: contract}, nil
}

// NewLotteryFilterer creates a new log filterer instance of Lottery, bound to a specific deployed contract.
func NewLotteryFilterer(address common.Address, filterer bind.ContractFilterer) (*LotteryFilterer, error) {
	contract, err := bindLottery(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &LotteryFilterer{contract: contract}, nil
}

// bindLottery binds a generic wrapper to an already deployed contract.
func bindLottery(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := LotteryMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Lottery *LotteryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Lottery.Contract.LotteryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Lottery *LotteryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Lottery.Contract.LotteryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Lottery *LotteryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Lottery.Contract.LotteryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Lottery *LotteryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Lottery.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Lottery *LotteryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Lottery.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Lottery *LotteryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Lottery.Contract.contract.Transact(opts, method, params...)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_Lottery *LotteryCaller) DOMAINSEPARATOR(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Lottery.contract.Call(opts, &out, "DOMAIN_SEPARATOR")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_Lottery *LotterySession) DOMAINSEPARATOR() ([32]byte, error) {
	return _Lottery.Contract.DOMAINSEPARATOR(&_Lottery.CallOpts)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_Lottery *LotteryCallerSession) DOMAINSEPARATOR() ([32]byte, error) {
	return _Lottery.Contract.DOMAINSEPARATOR(&_Lottery.CallOpts)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Lottery *LotteryCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Lottery.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Lottery *LotterySession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _Lottery.Contract.Allowance(&_Lottery.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Lottery *LotteryCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _Lottery.Contract.Allowance(&_Lottery.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_Lottery *LotteryCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Lottery.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_Lottery *LotterySession) BalanceOf(account common.Address) (*big.Int, error) {
	return _Lottery.Contract.BalanceOf(&_Lottery.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_Lottery *LotteryCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _Lottery.Contract.BalanceOf(&_Lottery.CallOpts, account)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Lottery *LotteryCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Lottery.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Lottery *LotterySession) Decimals() (uint8, error) {
	return _Lottery.Contract.Decimals(&_Lottery.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Lottery *LotteryCallerSession) Decimals() (uint8, error) {
	return _Lottery.Contract.Decimals(&_Lottery.CallOpts)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_Lottery *LotteryCaller) Eip712Domain(opts *bind.CallOpts) (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	var out []interface{}
	err := _Lottery.contract.Call(opts, &out, "eip712Domain")

	outstruct := new(struct {
		Fields            [1]byte
		Name              string
		Version           string
		ChainId           *big.Int
		VerifyingContract common.Address
		Salt              [32]byte
		Extensions        []*big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Fields = *abi.ConvertType(out[0], new([1]byte)).(*[1]byte)
	outstruct.Name = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.Version = *abi.ConvertType(out[2], new(string)).(*string)
	outstruct.ChainId = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.VerifyingContract = *abi.ConvertType(out[4], new(common.Address)).(*common.Address)
	outstruct.Salt = *abi.ConvertType(out[5], new([32]byte)).(*[32]byte)
	outstruct.Extensions = *abi.ConvertType(out[6], new([]*big.Int)).(*[]*big.Int)

	return *outstruct, err

}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_Lottery *LotterySession) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _Lottery.Contract.Eip712Domain(&_Lottery.CallOpts)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_Lottery *LotteryCallerSession) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _Lottery.Contract.Eip712Domain(&_Lottery.CallOpts)
}

// GetReleased is a free data retrieval call binding the contract method 0xf47a6e84.
//
// Solidity: function getReleased() view returns(bool)
func (_Lottery *LotteryCaller) GetReleased(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Lottery.contract.Call(opts, &out, "getReleased")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// GetReleased is a free data retrieval call binding the contract method 0xf47a6e84.
//
// Solidity: function getReleased() view returns(bool)
func (_Lottery *LotterySession) GetReleased() (bool, error) {
	return _Lottery.Contract.GetReleased(&_Lottery.CallOpts)
}

// GetReleased is a free data retrieval call binding the contract method 0xf47a6e84.
//
// Solidity: function getReleased() view returns(bool)
func (_Lottery *LotteryCallerSession) GetReleased() (bool, error) {
	return _Lottery.Contract.GetReleased(&_Lottery.CallOpts)
}

// GetStablecoinInfo is a free data retrieval call binding the contract method 0x60e74f56.
//
// Solidity: function getStablecoinInfo(address stablecoinAddress) view returns(string, uint256, address, bool)
func (_Lottery *LotteryCaller) GetStablecoinInfo(opts *bind.CallOpts, stablecoinAddress common.Address) (string, *big.Int, common.Address, bool, error) {
	var out []interface{}
	err := _Lottery.contract.Call(opts, &out, "getStablecoinInfo", stablecoinAddress)

	if err != nil {
		return *new(string), *new(*big.Int), *new(common.Address), *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	out2 := *abi.ConvertType(out[2], new(common.Address)).(*common.Address)
	out3 := *abi.ConvertType(out[3], new(bool)).(*bool)

	return out0, out1, out2, out3, err

}

// GetStablecoinInfo is a free data retrieval call binding the contract method 0x60e74f56.
//
// Solidity: function getStablecoinInfo(address stablecoinAddress) view returns(string, uint256, address, bool)
func (_Lottery *LotterySession) GetStablecoinInfo(stablecoinAddress common.Address) (string, *big.Int, common.Address, bool, error) {
	return _Lottery.Contract.GetStablecoinInfo(&_Lottery.CallOpts, stablecoinAddress)
}

// GetStablecoinInfo is a free data retrieval call binding the contract method 0x60e74f56.
//
// Solidity: function getStablecoinInfo(address stablecoinAddress) view returns(string, uint256, address, bool)
func (_Lottery *LotteryCallerSession) GetStablecoinInfo(stablecoinAddress common.Address) (string, *big.Int, common.Address, bool, error) {
	return _Lottery.Contract.GetStablecoinInfo(&_Lottery.CallOpts, stablecoinAddress)
}

// GetSupportedStablecoinsCount is a free data retrieval call binding the contract method 0x587a3965.
//
// Solidity: function getSupportedStablecoinsCount() view returns(uint256)
func (_Lottery *LotteryCaller) GetSupportedStablecoinsCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Lottery.contract.Call(opts, &out, "getSupportedStablecoinsCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetSupportedStablecoinsCount is a free data retrieval call binding the contract method 0x587a3965.
//
// Solidity: function getSupportedStablecoinsCount() view returns(uint256)
func (_Lottery *LotterySession) GetSupportedStablecoinsCount() (*big.Int, error) {
	return _Lottery.Contract.GetSupportedStablecoinsCount(&_Lottery.CallOpts)
}

// GetSupportedStablecoinsCount is a free data retrieval call binding the contract method 0x587a3965.
//
// Solidity: function getSupportedStablecoinsCount() view returns(uint256)
func (_Lottery *LotteryCallerSession) GetSupportedStablecoinsCount() (*big.Int, error) {
	return _Lottery.Contract.GetSupportedStablecoinsCount(&_Lottery.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Lottery *LotteryCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Lottery.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Lottery *LotterySession) Name() (string, error) {
	return _Lottery.Contract.Name(&_Lottery.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Lottery *LotteryCallerSession) Name() (string, error) {
	return _Lottery.Contract.Name(&_Lottery.CallOpts)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_Lottery *LotteryCaller) Nonces(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Lottery.contract.Call(opts, &out, "nonces", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_Lottery *LotterySession) Nonces(owner common.Address) (*big.Int, error) {
	return _Lottery.Contract.Nonces(&_Lottery.CallOpts, owner)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_Lottery *LotteryCallerSession) Nonces(owner common.Address) (*big.Int, error) {
	return _Lottery.Contract.Nonces(&_Lottery.CallOpts, owner)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Lottery *LotteryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Lottery.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Lottery *LotterySession) Owner() (common.Address, error) {
	return _Lottery.Contract.Owner(&_Lottery.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Lottery *LotteryCallerSession) Owner() (common.Address, error) {
	return _Lottery.Contract.Owner(&_Lottery.CallOpts)
}

// Stablecoins is a free data retrieval call binding the contract method 0xfa847836.
//
// Solidity: function stablecoins(address ) view returns(string name, uint256 rate, address receiver, bool isSupported)
func (_Lottery *LotteryCaller) Stablecoins(opts *bind.CallOpts, arg0 common.Address) (struct {
	Name        string
	Rate        *big.Int
	Receiver    common.Address
	IsSupported bool
}, error) {
	var out []interface{}
	err := _Lottery.contract.Call(opts, &out, "stablecoins", arg0)

	outstruct := new(struct {
		Name        string
		Rate        *big.Int
		Receiver    common.Address
		IsSupported bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Name = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.Rate = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Receiver = *abi.ConvertType(out[2], new(common.Address)).(*common.Address)
	outstruct.IsSupported = *abi.ConvertType(out[3], new(bool)).(*bool)

	return *outstruct, err

}

// Stablecoins is a free data retrieval call binding the contract method 0xfa847836.
//
// Solidity: function stablecoins(address ) view returns(string name, uint256 rate, address receiver, bool isSupported)
func (_Lottery *LotterySession) Stablecoins(arg0 common.Address) (struct {
	Name        string
	Rate        *big.Int
	Receiver    common.Address
	IsSupported bool
}, error) {
	return _Lottery.Contract.Stablecoins(&_Lottery.CallOpts, arg0)
}

// Stablecoins is a free data retrieval call binding the contract method 0xfa847836.
//
// Solidity: function stablecoins(address ) view returns(string name, uint256 rate, address receiver, bool isSupported)
func (_Lottery *LotteryCallerSession) Stablecoins(arg0 common.Address) (struct {
	Name        string
	Rate        *big.Int
	Receiver    common.Address
	IsSupported bool
}, error) {
	return _Lottery.Contract.Stablecoins(&_Lottery.CallOpts, arg0)
}

// SupportedStablecoinsList is a free data retrieval call binding the contract method 0xeb3f952f.
//
// Solidity: function supportedStablecoinsList(uint256 ) view returns(address)
func (_Lottery *LotteryCaller) SupportedStablecoinsList(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Lottery.contract.Call(opts, &out, "supportedStablecoinsList", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SupportedStablecoinsList is a free data retrieval call binding the contract method 0xeb3f952f.
//
// Solidity: function supportedStablecoinsList(uint256 ) view returns(address)
func (_Lottery *LotterySession) SupportedStablecoinsList(arg0 *big.Int) (common.Address, error) {
	return _Lottery.Contract.SupportedStablecoinsList(&_Lottery.CallOpts, arg0)
}

// SupportedStablecoinsList is a free data retrieval call binding the contract method 0xeb3f952f.
//
// Solidity: function supportedStablecoinsList(uint256 ) view returns(address)
func (_Lottery *LotteryCallerSession) SupportedStablecoinsList(arg0 *big.Int) (common.Address, error) {
	return _Lottery.Contract.SupportedStablecoinsList(&_Lottery.CallOpts, arg0)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Lottery *LotteryCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Lottery.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Lottery *LotterySession) Symbol() (string, error) {
	return _Lottery.Contract.Symbol(&_Lottery.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Lottery *LotteryCallerSession) Symbol() (string, error) {
	return _Lottery.Contract.Symbol(&_Lottery.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Lottery *LotteryCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Lottery.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Lottery *LotterySession) TotalSupply() (*big.Int, error) {
	return _Lottery.Contract.TotalSupply(&_Lottery.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Lottery *LotteryCallerSession) TotalSupply() (*big.Int, error) {
	return _Lottery.Contract.TotalSupply(&_Lottery.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_Lottery *LotteryTransactor) Approve(opts *bind.TransactOpts, spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _Lottery.contract.Transact(opts, "approve", spender, value)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_Lottery *LotterySession) Approve(spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _Lottery.Contract.Approve(&_Lottery.TransactOpts, spender, value)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_Lottery *LotteryTransactorSession) Approve(spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _Lottery.Contract.Approve(&_Lottery.TransactOpts, spender, value)
}

// Buy is a paid mutator transaction binding the contract method 0x643f8580.
//
// Solidity: function buy(address placeAddr, uint256 _amount, uint256[] target) returns(bool)
func (_Lottery *LotteryTransactor) Buy(opts *bind.TransactOpts, placeAddr common.Address, _amount *big.Int, target []*big.Int) (*types.Transaction, error) {
	return _Lottery.contract.Transact(opts, "buy", placeAddr, _amount, target)
}

// Buy is a paid mutator transaction binding the contract method 0x643f8580.
//
// Solidity: function buy(address placeAddr, uint256 _amount, uint256[] target) returns(bool)
func (_Lottery *LotterySession) Buy(placeAddr common.Address, _amount *big.Int, target []*big.Int) (*types.Transaction, error) {
	return _Lottery.Contract.Buy(&_Lottery.TransactOpts, placeAddr, _amount, target)
}

// Buy is a paid mutator transaction binding the contract method 0x643f8580.
//
// Solidity: function buy(address placeAddr, uint256 _amount, uint256[] target) returns(bool)
func (_Lottery *LotteryTransactorSession) Buy(placeAddr common.Address, _amount *big.Int, target []*big.Int) (*types.Transaction, error) {
	return _Lottery.Contract.Buy(&_Lottery.TransactOpts, placeAddr, _amount, target)
}

// ExchangeForLOT is a paid mutator transaction binding the contract method 0xe8120402.
//
// Solidity: function exchangeForLOT(address stablecoinAddress, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns(uint256)
func (_Lottery *LotteryTransactor) ExchangeForLOT(opts *bind.TransactOpts, stablecoinAddress common.Address, amount *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _Lottery.contract.Transact(opts, "exchangeForLOT", stablecoinAddress, amount, deadline, v, r, s)
}

// ExchangeForLOT is a paid mutator transaction binding the contract method 0xe8120402.
//
// Solidity: function exchangeForLOT(address stablecoinAddress, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns(uint256)
func (_Lottery *LotterySession) ExchangeForLOT(stablecoinAddress common.Address, amount *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _Lottery.Contract.ExchangeForLOT(&_Lottery.TransactOpts, stablecoinAddress, amount, deadline, v, r, s)
}

// ExchangeForLOT is a paid mutator transaction binding the contract method 0xe8120402.
//
// Solidity: function exchangeForLOT(address stablecoinAddress, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns(uint256)
func (_Lottery *LotteryTransactorSession) ExchangeForLOT(stablecoinAddress common.Address, amount *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _Lottery.Contract.ExchangeForLOT(&_Lottery.TransactOpts, stablecoinAddress, amount, deadline, v, r, s)
}

// ExchangeForStablecoin is a paid mutator transaction binding the contract method 0x9f9e9760.
//
// Solidity: function exchangeForStablecoin(address stablecoinAddress, uint256 lotAmount) returns(uint256)
func (_Lottery *LotteryTransactor) ExchangeForStablecoin(opts *bind.TransactOpts, stablecoinAddress common.Address, lotAmount *big.Int) (*types.Transaction, error) {
	return _Lottery.contract.Transact(opts, "exchangeForStablecoin", stablecoinAddress, lotAmount)
}

// ExchangeForStablecoin is a paid mutator transaction binding the contract method 0x9f9e9760.
//
// Solidity: function exchangeForStablecoin(address stablecoinAddress, uint256 lotAmount) returns(uint256)
func (_Lottery *LotterySession) ExchangeForStablecoin(stablecoinAddress common.Address, lotAmount *big.Int) (*types.Transaction, error) {
	return _Lottery.Contract.ExchangeForStablecoin(&_Lottery.TransactOpts, stablecoinAddress, lotAmount)
}

// ExchangeForStablecoin is a paid mutator transaction binding the contract method 0x9f9e9760.
//
// Solidity: function exchangeForStablecoin(address stablecoinAddress, uint256 lotAmount) returns(uint256)
func (_Lottery *LotteryTransactorSession) ExchangeForStablecoin(stablecoinAddress common.Address, lotAmount *big.Int) (*types.Transaction, error) {
	return _Lottery.Contract.ExchangeForStablecoin(&_Lottery.TransactOpts, stablecoinAddress, lotAmount)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_Lottery *LotteryTransactor) Permit(opts *bind.TransactOpts, owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _Lottery.contract.Transact(opts, "permit", owner, spender, value, deadline, v, r, s)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_Lottery *LotterySession) Permit(owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _Lottery.Contract.Permit(&_Lottery.TransactOpts, owner, spender, value, deadline, v, r, s)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_Lottery *LotteryTransactorSession) Permit(owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _Lottery.Contract.Permit(&_Lottery.TransactOpts, owner, spender, value, deadline, v, r, s)
}

// RemoveStablecoin is a paid mutator transaction binding the contract method 0x3b947d2b.
//
// Solidity: function removeStablecoin(address stablecoinAddress) returns()
func (_Lottery *LotteryTransactor) RemoveStablecoin(opts *bind.TransactOpts, stablecoinAddress common.Address) (*types.Transaction, error) {
	return _Lottery.contract.Transact(opts, "removeStablecoin", stablecoinAddress)
}

// RemoveStablecoin is a paid mutator transaction binding the contract method 0x3b947d2b.
//
// Solidity: function removeStablecoin(address stablecoinAddress) returns()
func (_Lottery *LotterySession) RemoveStablecoin(stablecoinAddress common.Address) (*types.Transaction, error) {
	return _Lottery.Contract.RemoveStablecoin(&_Lottery.TransactOpts, stablecoinAddress)
}

// RemoveStablecoin is a paid mutator transaction binding the contract method 0x3b947d2b.
//
// Solidity: function removeStablecoin(address stablecoinAddress) returns()
func (_Lottery *LotteryTransactorSession) RemoveStablecoin(stablecoinAddress common.Address) (*types.Transaction, error) {
	return _Lottery.Contract.RemoveStablecoin(&_Lottery.TransactOpts, stablecoinAddress)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Lottery *LotteryTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Lottery.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Lottery *LotterySession) RenounceOwnership() (*types.Transaction, error) {
	return _Lottery.Contract.RenounceOwnership(&_Lottery.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Lottery *LotteryTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Lottery.Contract.RenounceOwnership(&_Lottery.TransactOpts)
}

// SetReleased is a paid mutator transaction binding the contract method 0xd6fd2e8e.
//
// Solidity: function setReleased() returns()
func (_Lottery *LotteryTransactor) SetReleased(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Lottery.contract.Transact(opts, "setReleased")
}

// SetReleased is a paid mutator transaction binding the contract method 0xd6fd2e8e.
//
// Solidity: function setReleased() returns()
func (_Lottery *LotterySession) SetReleased() (*types.Transaction, error) {
	return _Lottery.Contract.SetReleased(&_Lottery.TransactOpts)
}

// SetReleased is a paid mutator transaction binding the contract method 0xd6fd2e8e.
//
// Solidity: function setReleased() returns()
func (_Lottery *LotteryTransactorSession) SetReleased() (*types.Transaction, error) {
	return _Lottery.Contract.SetReleased(&_Lottery.TransactOpts)
}

// SetStablecoin is a paid mutator transaction binding the contract method 0xc91357c7.
//
// Solidity: function setStablecoin(address stablecoinAddress, string name, uint256 rate, address receiver) returns()
func (_Lottery *LotteryTransactor) SetStablecoin(opts *bind.TransactOpts, stablecoinAddress common.Address, name string, rate *big.Int, receiver common.Address) (*types.Transaction, error) {
	return _Lottery.contract.Transact(opts, "setStablecoin", stablecoinAddress, name, rate, receiver)
}

// SetStablecoin is a paid mutator transaction binding the contract method 0xc91357c7.
//
// Solidity: function setStablecoin(address stablecoinAddress, string name, uint256 rate, address receiver) returns()
func (_Lottery *LotterySession) SetStablecoin(stablecoinAddress common.Address, name string, rate *big.Int, receiver common.Address) (*types.Transaction, error) {
	return _Lottery.Contract.SetStablecoin(&_Lottery.TransactOpts, stablecoinAddress, name, rate, receiver)
}

// SetStablecoin is a paid mutator transaction binding the contract method 0xc91357c7.
//
// Solidity: function setStablecoin(address stablecoinAddress, string name, uint256 rate, address receiver) returns()
func (_Lottery *LotteryTransactorSession) SetStablecoin(stablecoinAddress common.Address, name string, rate *big.Int, receiver common.Address) (*types.Transaction, error) {
	return _Lottery.Contract.SetStablecoin(&_Lottery.TransactOpts, stablecoinAddress, name, rate, receiver)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_Lottery *LotteryTransactor) Transfer(opts *bind.TransactOpts, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _Lottery.contract.Transact(opts, "transfer", to, value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_Lottery *LotterySession) Transfer(to common.Address, value *big.Int) (*types.Transaction, error) {
	return _Lottery.Contract.Transfer(&_Lottery.TransactOpts, to, value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_Lottery *LotteryTransactorSession) Transfer(to common.Address, value *big.Int) (*types.Transaction, error) {
	return _Lottery.Contract.Transfer(&_Lottery.TransactOpts, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_Lottery *LotteryTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _Lottery.contract.Transact(opts, "transferFrom", from, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_Lottery *LotterySession) TransferFrom(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _Lottery.Contract.TransferFrom(&_Lottery.TransactOpts, from, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_Lottery *LotteryTransactorSession) TransferFrom(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _Lottery.Contract.TransferFrom(&_Lottery.TransactOpts, from, to, value)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Lottery *LotteryTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Lottery.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Lottery *LotterySession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Lottery.Contract.TransferOwnership(&_Lottery.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Lottery *LotteryTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Lottery.Contract.TransferOwnership(&_Lottery.TransactOpts, newOwner)
}

// LotteryApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Lottery contract.
type LotteryApprovalIterator struct {
	Event *LotteryApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LotteryApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LotteryApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LotteryApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LotteryApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LotteryApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LotteryApproval represents a Approval event raised by the Lottery contract.
type LotteryApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Lottery *LotteryFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*LotteryApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _Lottery.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &LotteryApprovalIterator{contract: _Lottery.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Lottery *LotteryFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *LotteryApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _Lottery.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LotteryApproval)
				if err := _Lottery.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Lottery *LotteryFilterer) ParseApproval(log types.Log) (*LotteryApproval, error) {
	event := new(LotteryApproval)
	if err := _Lottery.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LotteryEIP712DomainChangedIterator is returned from FilterEIP712DomainChanged and is used to iterate over the raw logs and unpacked data for EIP712DomainChanged events raised by the Lottery contract.
type LotteryEIP712DomainChangedIterator struct {
	Event *LotteryEIP712DomainChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LotteryEIP712DomainChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LotteryEIP712DomainChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LotteryEIP712DomainChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LotteryEIP712DomainChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LotteryEIP712DomainChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LotteryEIP712DomainChanged represents a EIP712DomainChanged event raised by the Lottery contract.
type LotteryEIP712DomainChanged struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterEIP712DomainChanged is a free log retrieval operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_Lottery *LotteryFilterer) FilterEIP712DomainChanged(opts *bind.FilterOpts) (*LotteryEIP712DomainChangedIterator, error) {

	logs, sub, err := _Lottery.contract.FilterLogs(opts, "EIP712DomainChanged")
	if err != nil {
		return nil, err
	}
	return &LotteryEIP712DomainChangedIterator{contract: _Lottery.contract, event: "EIP712DomainChanged", logs: logs, sub: sub}, nil
}

// WatchEIP712DomainChanged is a free log subscription operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_Lottery *LotteryFilterer) WatchEIP712DomainChanged(opts *bind.WatchOpts, sink chan<- *LotteryEIP712DomainChanged) (event.Subscription, error) {

	logs, sub, err := _Lottery.contract.WatchLogs(opts, "EIP712DomainChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LotteryEIP712DomainChanged)
				if err := _Lottery.contract.UnpackLog(event, "EIP712DomainChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEIP712DomainChanged is a log parse operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_Lottery *LotteryFilterer) ParseEIP712DomainChanged(log types.Log) (*LotteryEIP712DomainChanged, error) {
	event := new(LotteryEIP712DomainChanged)
	if err := _Lottery.contract.UnpackLog(event, "EIP712DomainChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LotteryLOTExchangedIterator is returned from FilterLOTExchanged and is used to iterate over the raw logs and unpacked data for LOTExchanged events raised by the Lottery contract.
type LotteryLOTExchangedIterator struct {
	Event *LotteryLOTExchanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LotteryLOTExchangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LotteryLOTExchanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LotteryLOTExchanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LotteryLOTExchangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LotteryLOTExchangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LotteryLOTExchanged represents a LOTExchanged event raised by the Lottery contract.
type LotteryLOTExchanged struct {
	User             common.Address
	Stablecoin       common.Address
	LotAmount        *big.Int
	StablecoinAmount *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterLOTExchanged is a free log retrieval operation binding the contract event 0xfc6dde45c60c69954c97f71476d3252191ce43e2c4a7aec91806e6185de67887.
//
// Solidity: event LOTExchanged(address indexed user, address indexed stablecoin, uint256 lotAmount, uint256 stablecoinAmount)
func (_Lottery *LotteryFilterer) FilterLOTExchanged(opts *bind.FilterOpts, user []common.Address, stablecoin []common.Address) (*LotteryLOTExchangedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var stablecoinRule []interface{}
	for _, stablecoinItem := range stablecoin {
		stablecoinRule = append(stablecoinRule, stablecoinItem)
	}

	logs, sub, err := _Lottery.contract.FilterLogs(opts, "LOTExchanged", userRule, stablecoinRule)
	if err != nil {
		return nil, err
	}
	return &LotteryLOTExchangedIterator{contract: _Lottery.contract, event: "LOTExchanged", logs: logs, sub: sub}, nil
}

// WatchLOTExchanged is a free log subscription operation binding the contract event 0xfc6dde45c60c69954c97f71476d3252191ce43e2c4a7aec91806e6185de67887.
//
// Solidity: event LOTExchanged(address indexed user, address indexed stablecoin, uint256 lotAmount, uint256 stablecoinAmount)
func (_Lottery *LotteryFilterer) WatchLOTExchanged(opts *bind.WatchOpts, sink chan<- *LotteryLOTExchanged, user []common.Address, stablecoin []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var stablecoinRule []interface{}
	for _, stablecoinItem := range stablecoin {
		stablecoinRule = append(stablecoinRule, stablecoinItem)
	}

	logs, sub, err := _Lottery.contract.WatchLogs(opts, "LOTExchanged", userRule, stablecoinRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LotteryLOTExchanged)
				if err := _Lottery.contract.UnpackLog(event, "LOTExchanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLOTExchanged is a log parse operation binding the contract event 0xfc6dde45c60c69954c97f71476d3252191ce43e2c4a7aec91806e6185de67887.
//
// Solidity: event LOTExchanged(address indexed user, address indexed stablecoin, uint256 lotAmount, uint256 stablecoinAmount)
func (_Lottery *LotteryFilterer) ParseLOTExchanged(log types.Log) (*LotteryLOTExchanged, error) {
	event := new(LotteryLOTExchanged)
	if err := _Lottery.contract.UnpackLog(event, "LOTExchanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LotteryOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Lottery contract.
type LotteryOwnershipTransferredIterator struct {
	Event *LotteryOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LotteryOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LotteryOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LotteryOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LotteryOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LotteryOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LotteryOwnershipTransferred represents a OwnershipTransferred event raised by the Lottery contract.
type LotteryOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Lottery *LotteryFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*LotteryOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Lottery.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &LotteryOwnershipTransferredIterator{contract: _Lottery.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Lottery *LotteryFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *LotteryOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Lottery.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LotteryOwnershipTransferred)
				if err := _Lottery.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Lottery *LotteryFilterer) ParseOwnershipTransferred(log types.Log) (*LotteryOwnershipTransferred, error) {
	event := new(LotteryOwnershipTransferred)
	if err := _Lottery.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LotteryStablecoinRemovedIterator is returned from FilterStablecoinRemoved and is used to iterate over the raw logs and unpacked data for StablecoinRemoved events raised by the Lottery contract.
type LotteryStablecoinRemovedIterator struct {
	Event *LotteryStablecoinRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LotteryStablecoinRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LotteryStablecoinRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LotteryStablecoinRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LotteryStablecoinRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LotteryStablecoinRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LotteryStablecoinRemoved represents a StablecoinRemoved event raised by the Lottery contract.
type LotteryStablecoinRemoved struct {
	Stablecoin common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterStablecoinRemoved is a free log retrieval operation binding the contract event 0x3302a1b37f04242bb55603f5449e7ecd690a35eef08ba1353c48c20e2aae9cda.
//
// Solidity: event StablecoinRemoved(address indexed stablecoin)
func (_Lottery *LotteryFilterer) FilterStablecoinRemoved(opts *bind.FilterOpts, stablecoin []common.Address) (*LotteryStablecoinRemovedIterator, error) {

	var stablecoinRule []interface{}
	for _, stablecoinItem := range stablecoin {
		stablecoinRule = append(stablecoinRule, stablecoinItem)
	}

	logs, sub, err := _Lottery.contract.FilterLogs(opts, "StablecoinRemoved", stablecoinRule)
	if err != nil {
		return nil, err
	}
	return &LotteryStablecoinRemovedIterator{contract: _Lottery.contract, event: "StablecoinRemoved", logs: logs, sub: sub}, nil
}

// WatchStablecoinRemoved is a free log subscription operation binding the contract event 0x3302a1b37f04242bb55603f5449e7ecd690a35eef08ba1353c48c20e2aae9cda.
//
// Solidity: event StablecoinRemoved(address indexed stablecoin)
func (_Lottery *LotteryFilterer) WatchStablecoinRemoved(opts *bind.WatchOpts, sink chan<- *LotteryStablecoinRemoved, stablecoin []common.Address) (event.Subscription, error) {

	var stablecoinRule []interface{}
	for _, stablecoinItem := range stablecoin {
		stablecoinRule = append(stablecoinRule, stablecoinItem)
	}

	logs, sub, err := _Lottery.contract.WatchLogs(opts, "StablecoinRemoved", stablecoinRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LotteryStablecoinRemoved)
				if err := _Lottery.contract.UnpackLog(event, "StablecoinRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStablecoinRemoved is a log parse operation binding the contract event 0x3302a1b37f04242bb55603f5449e7ecd690a35eef08ba1353c48c20e2aae9cda.
//
// Solidity: event StablecoinRemoved(address indexed stablecoin)
func (_Lottery *LotteryFilterer) ParseStablecoinRemoved(log types.Log) (*LotteryStablecoinRemoved, error) {
	event := new(LotteryStablecoinRemoved)
	if err := _Lottery.contract.UnpackLog(event, "StablecoinRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LotteryStablecoinUpdatedIterator is returned from FilterStablecoinUpdated and is used to iterate over the raw logs and unpacked data for StablecoinUpdated events raised by the Lottery contract.
type LotteryStablecoinUpdatedIterator struct {
	Event *LotteryStablecoinUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LotteryStablecoinUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LotteryStablecoinUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LotteryStablecoinUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LotteryStablecoinUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LotteryStablecoinUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LotteryStablecoinUpdated represents a StablecoinUpdated event raised by the Lottery contract.
type LotteryStablecoinUpdated struct {
	Stablecoin common.Address
	Name       string
	Rate       *big.Int
	Receiver   common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterStablecoinUpdated is a free log retrieval operation binding the contract event 0xcc9386c98c5c2a003115422dc0330285d077229aa4414b964c041ea0edef707b.
//
// Solidity: event StablecoinUpdated(address indexed stablecoin, string name, uint256 rate, address receiver)
func (_Lottery *LotteryFilterer) FilterStablecoinUpdated(opts *bind.FilterOpts, stablecoin []common.Address) (*LotteryStablecoinUpdatedIterator, error) {

	var stablecoinRule []interface{}
	for _, stablecoinItem := range stablecoin {
		stablecoinRule = append(stablecoinRule, stablecoinItem)
	}

	logs, sub, err := _Lottery.contract.FilterLogs(opts, "StablecoinUpdated", stablecoinRule)
	if err != nil {
		return nil, err
	}
	return &LotteryStablecoinUpdatedIterator{contract: _Lottery.contract, event: "StablecoinUpdated", logs: logs, sub: sub}, nil
}

// WatchStablecoinUpdated is a free log subscription operation binding the contract event 0xcc9386c98c5c2a003115422dc0330285d077229aa4414b964c041ea0edef707b.
//
// Solidity: event StablecoinUpdated(address indexed stablecoin, string name, uint256 rate, address receiver)
func (_Lottery *LotteryFilterer) WatchStablecoinUpdated(opts *bind.WatchOpts, sink chan<- *LotteryStablecoinUpdated, stablecoin []common.Address) (event.Subscription, error) {

	var stablecoinRule []interface{}
	for _, stablecoinItem := range stablecoin {
		stablecoinRule = append(stablecoinRule, stablecoinItem)
	}

	logs, sub, err := _Lottery.contract.WatchLogs(opts, "StablecoinUpdated", stablecoinRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LotteryStablecoinUpdated)
				if err := _Lottery.contract.UnpackLog(event, "StablecoinUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStablecoinUpdated is a log parse operation binding the contract event 0xcc9386c98c5c2a003115422dc0330285d077229aa4414b964c041ea0edef707b.
//
// Solidity: event StablecoinUpdated(address indexed stablecoin, string name, uint256 rate, address receiver)
func (_Lottery *LotteryFilterer) ParseStablecoinUpdated(log types.Log) (*LotteryStablecoinUpdated, error) {
	event := new(LotteryStablecoinUpdated)
	if err := _Lottery.contract.UnpackLog(event, "StablecoinUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LotteryTokensExchangedIterator is returned from FilterTokensExchanged and is used to iterate over the raw logs and unpacked data for TokensExchanged events raised by the Lottery contract.
type LotteryTokensExchangedIterator struct {
	Event *LotteryTokensExchanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LotteryTokensExchangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LotteryTokensExchanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LotteryTokensExchanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LotteryTokensExchangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LotteryTokensExchangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LotteryTokensExchanged represents a TokensExchanged event raised by the Lottery contract.
type LotteryTokensExchanged struct {
	User             common.Address
	Stablecoin       common.Address
	StablecoinAmount *big.Int
	LotAmount        *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterTokensExchanged is a free log retrieval operation binding the contract event 0xc268aa3dfcf26d893e64804923970c993cb04f61bf2a8729638222b91b41a79a.
//
// Solidity: event TokensExchanged(address indexed user, address indexed stablecoin, uint256 stablecoinAmount, uint256 lotAmount)
func (_Lottery *LotteryFilterer) FilterTokensExchanged(opts *bind.FilterOpts, user []common.Address, stablecoin []common.Address) (*LotteryTokensExchangedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var stablecoinRule []interface{}
	for _, stablecoinItem := range stablecoin {
		stablecoinRule = append(stablecoinRule, stablecoinItem)
	}

	logs, sub, err := _Lottery.contract.FilterLogs(opts, "TokensExchanged", userRule, stablecoinRule)
	if err != nil {
		return nil, err
	}
	return &LotteryTokensExchangedIterator{contract: _Lottery.contract, event: "TokensExchanged", logs: logs, sub: sub}, nil
}

// WatchTokensExchanged is a free log subscription operation binding the contract event 0xc268aa3dfcf26d893e64804923970c993cb04f61bf2a8729638222b91b41a79a.
//
// Solidity: event TokensExchanged(address indexed user, address indexed stablecoin, uint256 stablecoinAmount, uint256 lotAmount)
func (_Lottery *LotteryFilterer) WatchTokensExchanged(opts *bind.WatchOpts, sink chan<- *LotteryTokensExchanged, user []common.Address, stablecoin []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var stablecoinRule []interface{}
	for _, stablecoinItem := range stablecoin {
		stablecoinRule = append(stablecoinRule, stablecoinItem)
	}

	logs, sub, err := _Lottery.contract.WatchLogs(opts, "TokensExchanged", userRule, stablecoinRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LotteryTokensExchanged)
				if err := _Lottery.contract.UnpackLog(event, "TokensExchanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTokensExchanged is a log parse operation binding the contract event 0xc268aa3dfcf26d893e64804923970c993cb04f61bf2a8729638222b91b41a79a.
//
// Solidity: event TokensExchanged(address indexed user, address indexed stablecoin, uint256 stablecoinAmount, uint256 lotAmount)
func (_Lottery *LotteryFilterer) ParseTokensExchanged(log types.Log) (*LotteryTokensExchanged, error) {
	event := new(LotteryTokensExchanged)
	if err := _Lottery.contract.UnpackLog(event, "TokensExchanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LotteryTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Lottery contract.
type LotteryTransferIterator struct {
	Event *LotteryTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LotteryTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LotteryTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LotteryTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LotteryTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LotteryTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LotteryTransfer represents a Transfer event raised by the Lottery contract.
type LotteryTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Lottery *LotteryFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*LotteryTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Lottery.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &LotteryTransferIterator{contract: _Lottery.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Lottery *LotteryFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *LotteryTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Lottery.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LotteryTransfer)
				if err := _Lottery.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Lottery *LotteryFilterer) ParseTransfer(log types.Log) (*LotteryTransfer, error) {
	event := new(LotteryTransfer)
	if err := _Lottery.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
